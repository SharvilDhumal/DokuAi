2025-07-01 10:26:58,225 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:257]
2025-07-01 10:27:23,483 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:257]
2025-07-01 10:31:17,700 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:257]
2025-07-01 10:31:30,137 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:124]
2025-07-01 10:31:30,377 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:132]
2025-07-01 10:31:30,384 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:149]
2025-07-01 10:31:30,390 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:153]
2025-07-01 10:31:30,395 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:113]
2025-07-01 10:31:30,413 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 10:31:30,464 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:161]
2025-07-01 10:31:30,465 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:162]
2025-07-01 10:31:30,467 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:213]
2025-07-01 10:34:28,744 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:188]
2025-07-01 10:56:00,377 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:262]
2025-07-01 10:56:36,322 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:127]
2025-07-01 10:56:36,564 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:135]
2025-07-01 10:56:36,566 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:152]
2025-07-01 10:56:36,567 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:156]
2025-07-01 10:56:36,568 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:116]
2025-07-01 10:56:36,572 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 10:56:36,586 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:164]
2025-07-01 10:56:36,587 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:165]
2025-07-01 10:56:36,587 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:218]
2025-07-01 10:59:24,523 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:191]
2025-07-01 11:00:34,308 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:127]
2025-07-01 11:00:34,556 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:135]
2025-07-01 11:00:34,564 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:152]
2025-07-01 11:00:34,574 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:156]
2025-07-01 11:00:34,577 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:116]
2025-07-01 11:00:34,599 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 11:00:34,651 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:164]
2025-07-01 11:00:34,652 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:165]
2025-07-01 11:00:34,653 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:218]
2025-07-01 11:02:00,271 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:191]
2025-07-01 11:15:09,206 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:266]
2025-07-01 11:15:30,464 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:127]
2025-07-01 11:15:30,705 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:135]
2025-07-01 11:15:30,708 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:152]
2025-07-01 11:15:30,710 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:156]
2025-07-01 11:15:30,711 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:116]
2025-07-01 11:15:30,722 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 11:15:30,758 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:164]
2025-07-01 11:15:30,759 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:165]
2025-07-01 11:15:30,760 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:218]
2025-07-01 11:17:22,480 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:191]
2025-07-01 11:37:51,227 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:263]
2025-07-01 11:38:02,875 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:127]
2025-07-01 11:38:03,127 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:135]
2025-07-01 11:38:03,129 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:152]
2025-07-01 11:38:03,131 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:156]
2025-07-01 11:38:03,131 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:116]
2025-07-01 11:38:03,134 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 11:38:03,148 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:164]
2025-07-01 11:38:03,148 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:165]
2025-07-01 11:38:03,149 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:219]
2025-07-01 11:40:09,288 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:191]
2025-07-01 11:44:09,496 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:127]
2025-07-01 11:44:09,749 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:135]
2025-07-01 11:44:09,752 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:152]
2025-07-01 11:44:09,754 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:156]
2025-07-01 11:44:09,754 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:116]
2025-07-01 11:44:09,757 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 11:44:09,765 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:164]
2025-07-01 11:44:09,765 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:165]
2025-07-01 11:44:09,766 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:219]
2025-07-01 11:45:22,797 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:191]
2025-07-01 11:56:06,093 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:264]
2025-07-01 11:56:44,031 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:127]
2025-07-01 11:56:44,283 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:135]
2025-07-01 11:56:44,288 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:152]
2025-07-01 11:56:44,291 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:156]
2025-07-01 11:56:44,291 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:116]
2025-07-01 11:56:44,301 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 11:56:44,334 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:164]
2025-07-01 11:56:44,335 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:165]
2025-07-01 11:56:44,336 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:223]
2025-07-01 11:58:55,355 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:191]
2025-07-01 12:14:49,517 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:264]
2025-07-01 12:15:08,456 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:127]
2025-07-01 12:15:08,705 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:135]
2025-07-01 12:15:08,709 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:152]
2025-07-01 12:15:08,712 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:156]
2025-07-01 12:15:08,713 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:116]
2025-07-01 12:15:08,722 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:71]
2025-07-01 12:15:08,749 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:164]
2025-07-01 12:15:08,750 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:165]
2025-07-01 12:15:08,751 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:223]
2025-07-01 12:17:18,198 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:191]
2025-07-01 12:28:02,550 INFO: Starting application [in C:\Users\sharv\Intern_project\backend\app.py:270]
2025-07-01 12:28:11,235 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:129]
2025-07-01 12:28:11,485 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:137]
2025-07-01 12:28:11,492 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:154]
2025-07-01 12:28:11,495 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:158]
2025-07-01 12:28:11,495 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:118]
2025-07-01 12:28:11,503 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:73]
2025-07-01 12:28:11,549 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:166]
2025-07-01 12:28:11,550 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:167]
2025-07-01 12:28:11,551 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:225]
2025-07-01 12:28:16,073 ERROR: Error processing chunk 1: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}} [in C:\Users\sharv\Intern_project\backend\app.py:256]
2025-07-01 12:28:16,086 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:193]
2025-07-01 13:53:59,315 INFO: Health check: OK [in C:\Users\sharv\Intern_project\backend\app.py:129]
2025-07-01 13:53:59,567 INFO: Received conversion request [in C:\Users\sharv\Intern_project\backend\app.py:137]
2025-07-01 13:53:59,572 INFO: Saving file to temporary location: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:154]
2025-07-01 13:53:59,573 INFO: Starting document processing [in C:\Users\sharv\Intern_project\backend\app.py:158]
2025-07-01 13:53:59,574 INFO: Extracting text from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:118]
2025-07-01 13:53:59,577 INFO: Extracting images from DOCX: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:73]
2025-07-01 13:53:59,590 INFO: Extracted text length: 1506 [in C:\Users\sharv\Intern_project\backend\app.py:166]
2025-07-01 13:53:59,590 INFO: Extracted images count: 8 [in C:\Users\sharv\Intern_project\backend\app.py:167]
2025-07-01 13:53:59,591 INFO: Processing chunk 1/1 [in C:\Users\sharv\Intern_project\backend\app.py:225]
2025-07-01 13:54:04,142 ERROR: Error processing chunk 1: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}} [in C:\Users\sharv\Intern_project\backend\app.py:256]
2025-07-01 13:54:04,149 INFO: Temporary file removed: C:\Users\sharv\AppData\Local\Temp\Business_Case.docx [in C:\Users\sharv\Intern_project\backend\app.py:193]
2025-07-03 23:52:12,408 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-03 23:52:16,846 - __main__ - INFO - Received file: Business Case.docx
2025-07-03 23:52:16,863 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\32b9be23ba8a42808d5d48ca4c288f8d.jpeg
2025-07-03 23:52:16,863 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\56023fd41e11434596dd3a6376c13afb.png
2025-07-03 23:52:16,864 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\0eaffb9e34dd41da9906e3eb9f1a9911.jpeg
2025-07-03 23:52:16,865 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\8544a1738761422fad6a6b511092e764.jpeg
2025-07-03 23:52:17,364 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-03 23:52:17,365 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-03 23:52:17,381 - __main__ - INFO - Received file: Business Case.docx
2025-07-03 23:52:17,395 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\aa35a999f1a0472ea8caeb9951d0aac6.jpeg
2025-07-03 23:52:17,397 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\5da838fd15124798863dcf4599ebb926.png
2025-07-03 23:52:17,399 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\0fb3ecb66ba54963b3ca4abe38688674.jpeg
2025-07-03 23:52:17,402 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\7de8d930fd2f414fbf136ce208bb2d08.jpeg
2025-07-03 23:52:17,709 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-03 23:52:17,710 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-03 23:54:12,538 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-03 23:55:13,461 - __main__ - INFO - Received file: Business Case.docx
2025-07-03 23:55:13,493 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\cf6ebd02c7354d66a62d618229f422eb.jpeg
2025-07-03 23:55:13,494 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\02aa05e11afe482cab813d346b06b6ce.png
2025-07-03 23:55:13,497 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\1fa2a5e815ae4d43b3b35b10498e5453.jpeg
2025-07-03 23:55:13,501 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\b4a2d9db5dfd43f8807b0c6a31a57d81.jpeg
2025-07-03 23:55:14,639 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-03 23:55:14,641 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-03 23:57:47,709 - __main__ - INFO - Received file: Business Case.docx
2025-07-03 23:57:47,720 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\70312a06cf834e588d8eb68a9074c43f.jpeg
2025-07-03 23:57:47,721 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\081873990170482a8668bed66a711bbd.png
2025-07-03 23:57:47,723 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\8c86b98243c9406abbd947594f618198.jpeg
2025-07-03 23:57:47,726 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\64f9b687c7934f68946c943a8e52bcea.jpeg
2025-07-03 23:57:48,065 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-03 23:57:48,065 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-03 23:58:25,721 - __main__ - INFO - Received file: Business Case.docx
2025-07-03 23:58:25,729 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\53ef5ade3b16444391f7a3c0deb29f10.jpeg
2025-07-03 23:58:25,730 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\00636125867f4d4eb7c752f0467a7571.png
2025-07-03 23:58:25,731 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\46852af1b6184ffa8ebdc7679346498c.jpeg
2025-07-03 23:58:25,733 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\f57561375e0c421f86d04e2e76359b72.jpeg
2025-07-03 23:58:26,017 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-03 23:58:26,019 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-04 00:04:22,145 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:04:22,159 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\0f823defaac447459b8753c60662cd99.jpeg
2025-07-04 00:04:22,160 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\aa256b9bfb7841c38c36cd807e54e08f.png
2025-07-04 00:04:22,162 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\be912ba23ad3425ab1412c5d2094eef1.jpeg
2025-07-04 00:04:22,164 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\f7bc1b2880de4557925940ba1cb71c74.jpeg
2025-07-04 00:04:22,482 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-04 00:04:22,483 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-04 00:08:21,349 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 00:08:34,471 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:08:34,495 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\44c225029d884673b36f95cbead7317d.jpeg
2025-07-04 00:08:34,497 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\187ea40e80044b0fae18a2da3946e216.png
2025-07-04 00:08:34,498 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\f047757ea2284fc2a17ec3dd08ec3def.jpeg
2025-07-04 00:08:34,500 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\6670d88e63dc4e8da3ff691a90aa047f.jpeg
2025-07-04 00:08:36,916 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:08:36,980 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:08:36,998 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\aace519f447741f99f6cce931e0b3244.jpeg
2025-07-04 00:08:37,000 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\fc87153033a647c7be463576ed189f26.png
2025-07-04 00:08:37,002 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\9d7d4ee50cce4ff09a24a91ed90ea9fd.jpeg
2025-07-04 00:08:37,006 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\13fa62d5902846f4bb89071b9b44cafa.jpeg
2025-07-04 00:08:39,025 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:11:18,032 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:11:18,052 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\4f6ade3a260b42c39ccefe60e5f386e1.jpeg
2025-07-04 00:11:18,054 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\d5f600ac49e742f981ec6b22f8e7b52c.png
2025-07-04 00:11:18,055 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\6befa2dac7de4d2a8b79f688448d2c2b.jpeg
2025-07-04 00:11:18,057 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\67dea38457534a258ad78b734e6053bd.jpeg
2025-07-04 00:11:20,053 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:18:01,236 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 00:18:13,865 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:18:13,902 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:18:13,906 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:18:13,909 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_6.jpeg
2025-07-04 00:18:13,915 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_7.jpeg
2025-07-04 00:18:14,991 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-04 00:18:14,993 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.490203 seconds
2025-07-04 00:18:16,906 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:18:16,951 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:18:16,967 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:18:16,969 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:18:16,970 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_6.jpeg
2025-07-04 00:18:16,973 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_7.jpeg
2025-07-04 00:18:18,355 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-04 00:18:18,357 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.471535 seconds
2025-07-04 00:18:19,087 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-04 00:18:19,094 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.891872 seconds
2025-07-04 00:18:21,356 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:18:44,853 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:18:44,871 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:18:44,874 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:18:44,877 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_6.jpeg
2025-07-04 00:18:44,880 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_7.jpeg
2025-07-04 00:18:46,774 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:21:45,866 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:21:45,885 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:21:45,887 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:21:45,890 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_6.jpeg
2025-07-04 00:21:45,892 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_7.jpeg
2025-07-04 00:21:47,736 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:21:47,762 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:21:47,791 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:21:47,793 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:21:47,795 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_6.jpeg
2025-07-04 00:21:47,797 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_7.jpeg
2025-07-04 00:21:49,647 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:36:22,996 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 00:36:32,198 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:36:32,209 - __main__ - ERROR - Error processing DOCX: [Errno 2] No such file or directory: 'temp_images\\image1.jpeg'
2025-07-04 00:36:32,216 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 188, in extract_text_and_images_from_docx
    text = docx2txt.process(docx_path, "temp_images")
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\docx2txt\docx2txt.py", line 103, in process
    with open(dst_fname, "wb") as dst_f:
         ~~~~^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'temp_images\\image1.jpeg'

2025-07-04 00:36:32,220 - __main__ - ERROR - Conversion error: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpwuz9a4bk.docx'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 188, in extract_text_and_images_from_docx
    text = docx2txt.process(docx_path, "temp_images")
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\docx2txt\docx2txt.py", line 103, in process
    with open(dst_fname, "wb") as dst_f:
         ~~~~^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'temp_images\\image1.jpeg'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in convert_file
    text, images = await extract_text_and_images_from_docx(temp_path, doc_name=doc_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 239, in extract_text_and_images_from_docx
    raise HTTPException(status_code=500, detail="Failed to process DOCX")
fastapi.exceptions.HTTPException: 500: Failed to process DOCX

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 410, in convert_file
    os.unlink(temp_path)
    ~~~~~~~~~^^^^^^^^^^^
PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpwuz9a4bk.docx'

2025-07-04 00:41:30,485 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 00:41:53,056 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:41:53,080 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:41:53,086 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 00:41:53,091 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:41:53,095 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 00:41:55,263 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:41:55,309 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:41:55,327 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:41:55,330 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 00:41:55,332 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:41:55,336 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 00:41:57,164 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:53:34,035 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 00:53:46,100 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:53:46,137 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:53:46,148 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 00:53:46,155 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:53:46,161 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 00:53:49,694 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:53:49,736 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 00:53:49,755 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 00:53:49,760 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 00:53:49,764 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:53:49,769 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 00:53:52,211 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:58:30,774 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 00:58:39,399 - __main__ - INFO - Received file: Business Case.pdf
2025-07-04 00:58:40,718 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.png
2025-07-04 00:58:41,012 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.png
2025-07-04 00:58:41,305 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:58:44,215 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 00:58:44,252 - __main__ - INFO - Received file: Business Case.pdf
2025-07-04 00:58:45,173 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.png
2025-07-04 00:58:45,457 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.png
2025-07-04 00:58:45,758 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 00:58:48,213 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 01:00:22,812 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 01:00:40,198 - __main__ - INFO - Received file: Python_Certificate.pdf
2025-07-04 01:00:41,024 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Python_Certificate_1.png
2025-07-04 01:00:42,004 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 01:03:18,568 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 01:03:30,673 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 01:03:30,690 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 01:03:30,692 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 01:03:30,693 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 01:03:30,695 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 01:03:33,055 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 01:03:33,097 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 01:03:33,119 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 01:03:33,122 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 01:03:33,124 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 01:03:33,128 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 01:03:35,068 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 10:12:52,250 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 10:13:05,474 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 10:13:05,530 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 10:13:05,536 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 10:13:05,541 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 10:13:05,546 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 10:13:08,008 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 10:13:08,060 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 10:13:08,082 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 10:13:08,088 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 10:13:08,096 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 10:13:08,101 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 10:13:09,983 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 10:31:33,614 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 10:31:40,313 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 10:31:40,344 - __main__ - ERROR - Conversion error: module 'docx2txt' has no attribute 'process_element'
2025-07-04 10:31:40,345 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 488, in convert_file
    text, images = await extract_text_and_images_from_docx(temp_path, doc_name=doc_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 277, in extract_text_and_images_from_docx
    text = docx2txt.process_element(element)
           ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: module 'docx2txt' has no attribute 'process_element'

2025-07-04 10:35:07,536 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 10:40:06,670 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 10:40:06,673 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 10:40:06,673 - __main__ - INFO - File size: 285804 bytes
2025-07-04 10:40:06,673 - __main__ - INFO - Processing DOCX file
2025-07-04 10:40:06,687 - __main__ - ERROR - Unexpected error during conversion: module 'docx2txt' has no attribute 'process_element'
2025-07-04 10:40:06,689 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 512, in convert_file
    text, images = await extract_text_and_images_from_docx(temp_path, doc_name=doc_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 277, in extract_text_and_images_from_docx
    text = docx2txt.process_element(element)
           ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: module 'docx2txt' has no attribute 'process_element'

2025-07-04 10:43:53,965 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 10:44:32,216 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 10:44:32,219 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 10:44:32,219 - __main__ - INFO - File size: 285804 bytes
2025-07-04 10:44:32,220 - __main__ - INFO - Processing DOCX file
2025-07-04 10:44:32,235 - __main__ - ERROR - Unexpected error during conversion: module 'docx2txt' has no attribute 'process_element'
2025-07-04 10:44:32,237 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 512, in convert_file
    text, images = await extract_text_and_images_from_docx(temp_path, doc_name=doc_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 277, in extract_text_and_images_from_docx
    text = docx2txt.process_element(element)
           ^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: module 'docx2txt' has no attribute 'process_element'

2025-07-04 11:13:29,056 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 11:13:39,768 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:13:39,770 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:13:39,771 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:13:39,771 - __main__ - INFO - Processing DOCX file
2025-07-04 11:13:39,788 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:13:39,789 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:13:39,790 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:13:39,792 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:13:39,794 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:13:43,713 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:13:43,720 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:13:43,756 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:13:43,763 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:13:43,764 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:13:43,766 - __main__ - INFO - Processing DOCX file
2025-07-04 11:13:43,793 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:13:43,796 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:13:43,800 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:13:43,804 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:13:43,809 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:13:46,723 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:13:46,727 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:14:17,589 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:14:17,594 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:14:17,596 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:14:17,597 - __main__ - INFO - Processing DOCX file
2025-07-04 11:14:17,624 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:14:17,628 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:14:17,632 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:14:17,636 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:14:17,641 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:14:20,692 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:14:20,697 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:14:20,721 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:14:20,726 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:14:20,731 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:14:20,732 - __main__ - INFO - Processing DOCX file
2025-07-04 11:14:20,755 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:14:20,758 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:14:20,761 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:14:20,763 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:14:20,768 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:14:24,670 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:14:24,673 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:20:14,055 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 11:20:30,251 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:20:30,257 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:20:30,258 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:20:30,258 - __main__ - INFO - Processing DOCX file
2025-07-04 11:20:30,292 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:20:30,295 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:20:30,298 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:20:30,303 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:20:30,311 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:20:34,241 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:20:34,247 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:20:34,279 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:20:34,281 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:20:34,281 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:20:34,282 - __main__ - INFO - Processing DOCX file
2025-07-04 11:20:34,300 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:20:34,303 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:20:34,305 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:20:34,307 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:20:34,310 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:20:36,221 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:20:36,224 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:23:11,212 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:23:11,216 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:23:11,217 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:23:11,218 - __main__ - INFO - Processing DOCX file
2025-07-04 11:23:11,247 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:23:11,252 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:23:11,256 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:23:11,260 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:23:11,268 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:23:14,932 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:23:14,937 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:23:14,991 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 11:23:14,998 - __main__ - INFO - Processing file: Business Case.docx
2025-07-04 11:23:14,999 - __main__ - INFO - File size: 285804 bytes
2025-07-04 11:23:15,000 - __main__ - INFO - Processing DOCX file
2025-07-04 11:23:15,073 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 11:23:15,086 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 11:23:15,094 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 11:23:15,097 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 11:23:15,108 - __main__ - INFO - Processing extracted content with Groq
2025-07-04 11:23:18,713 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 11:23:18,719 - __main__ - INFO - Conversion completed successfully
2025-07-04 11:33:56,671 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 11:38:23,826 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 12:04:37,140 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 12:05:06,828 - __main__ - INFO - Received file: Business Case.pdf
2025-07-04 12:05:08,027 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.png
2025-07-04 12:05:08,147 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.png
2025-07-04 12:05:08,238 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 12:05:11,102 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 12:05:11,142 - __main__ - INFO - Received file: Business Case.pdf
2025-07-04 12:05:11,893 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.png
2025-07-04 12:05:11,986 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.png
2025-07-04 12:05:12,084 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 12:05:15,129 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 12:10:34,144 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 12:11:44,929 - __main__ - INFO - Received file: Business Case.pdf
2025-07-04 12:11:46,780 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.png
2025-07-04 12:11:47,110 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.png
2025-07-04 12:11:47,402 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 12:11:51,033 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 12:11:51,127 - __main__ - INFO - Received file: Business Case.pdf
2025-07-04 12:11:52,963 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.png
2025-07-04 12:11:53,284 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.png
2025-07-04 12:11:53,598 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 12:11:57,220 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 12:26:42,041 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 12:26:52,706 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 12:26:52,741 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 12:26:52,747 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 12:26:52,755 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 12:26:52,760 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 12:26:59,811 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 12:26:59,895 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 12:26:59,922 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 12:26:59,927 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 12:26:59,933 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 12:26:59,938 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 12:27:03,254 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 14:05:59,440 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 14:06:08,649 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 14:06:08,700 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 14:06:08,707 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 14:06:08,716 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 14:06:08,723 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 14:06:12,787 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 14:06:12,850 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 14:06:12,891 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_1.jpeg
2025-07-04 14:06:12,898 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_2.jpeg
2025-07-04 14:06:12,908 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_3.png
2025-07-04 14:06:12,914 - __main__ - INFO - Image saved to C:\Users\sharv\Intern_project\backend\uploads\Business_Case_4.jpeg
2025-07-04 14:06:17,195 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 14:08:17,443 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-04 14:08:47,532 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 14:08:51,839 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 14:08:51,893 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 14:08:55,383 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-04 14:10:23,169 - __main__ - INFO - Received file: Business Case.docx
2025-07-04 14:10:25,943 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:23:40,895 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 11:27:29,458 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:27:32,138 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:27:32,176 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:27:34,284 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:44:12,300 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 11:44:25,991 - __main__ - INFO - Received file: Python_Certificate.pdf
2025-07-05 11:44:27,654 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:44:57,604 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:44:59,568 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:44:59,601 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:45:01,670 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:49:06,620 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 11:49:08,970 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:49:08,998 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 11:49:10,895 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:49:19,816 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:49:21,755 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:49:21,791 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:49:23,761 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:50:54,070 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 11:51:05,340 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 11:51:06,407 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-05 11:51:06,409 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-05 11:51:06,440 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 11:51:07,188 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-05 11:51:07,190 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-05 11:51:13,931 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:51:13,967 - __main__ - ERROR - Error processing DOCX: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 11:51:13,972 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 265, in extract_text_and_images_from_docx
    process_paragraph(paragraph)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 211, in process_paragraph
    for shape in run._element.xpath('.//pic:pic', namespaces=run._element.nsmap):
                 ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'

2025-07-05 11:52:23,189 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 11:52:47,660 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 11:53:03,104 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:53:03,126 - __main__ - ERROR - Error processing DOCX: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 11:53:03,130 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 265, in extract_text_and_images_from_docx
    process_paragraph(paragraph)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 211, in process_paragraph
    for shape in run._element.xpath('.//pic:pic', namespaces=run._element.nsmap):
                 ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'

2025-07-05 11:53:20,299 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:53:20,317 - __main__ - ERROR - Error processing DOCX: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 11:53:20,319 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 265, in extract_text_and_images_from_docx
    process_paragraph(paragraph)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 211, in process_paragraph
    for shape in run._element.xpath('.//pic:pic', namespaces=run._element.nsmap):
                 ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'

2025-07-05 11:53:24,927 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 11:53:27,009 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:53:27,050 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 11:53:28,718 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:53:57,644 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 11:54:08,273 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:54:10,355 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:54:10,402 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:54:11,983 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:57:07,647 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 11:58:35,724 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:58:37,879 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:58:37,926 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:58:39,636 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:58:59,153 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:59:00,850 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 11:59:00,894 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 11:59:02,521 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:00:01,325 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 12:00:12,392 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 12:00:15,613 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:00:15,654 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 12:00:18,462 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:00:37,417 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:00:39,331 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:00:39,358 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:00:41,445 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:10:44,256 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 12:10:57,696 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:11:00,142 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:11:00,193 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:11:02,216 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:11:25,544 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 12:11:28,562 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:11:28,612 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 12:11:31,343 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:19:48,548 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 12:20:25,337 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:20:27,847 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:20:27,906 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:20:29,947 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:22:18,160 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 12:22:28,617 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:22:28,633 - __main__ - ERROR - Error processing DOCX: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:22:28,637 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 216, in extract_text_and_images_from_docx
    img_name = os.path.basename(rel._target)
  File "<frozen ntpath>", line 256, in basename
  File "<frozen ntpath>", line 227, in split
TypeError: expected str, bytes or os.PathLike object, not ImagePart

2025-07-05 12:23:32,100 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 12:23:44,519 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:23:44,534 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:44,535 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:44,535 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:44,536 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:44,536 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,537 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,537 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,538 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,539 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,539 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,540 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,540 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,541 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,541 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,542 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,543 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,543 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,544 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,545 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,545 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,546 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,546 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,547 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,548 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,549 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,550 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,550 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,551 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,552 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,554 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,555 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,556 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,557 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,557 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,558 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,559 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,560 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,560 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,561 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,561 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,562 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,563 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,564 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,565 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,566 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,567 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,568 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,569 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,570 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,571 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,572 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,572 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,573 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,574 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,574 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,575 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,576 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,577 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,578 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,579 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,579 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,580 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,581 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,582 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,583 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,584 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,585 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,586 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,587 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,588 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,589 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,590 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,591 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,592 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,593 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,593 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,594 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,595 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,596 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,596 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,597 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,598 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,598 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,599 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,600 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,600 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,601 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,601 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,602 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,603 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,603 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,604 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,604 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,605 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,606 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,607 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,607 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,608 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,609 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,610 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,611 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,612 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,612 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,613 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,613 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,614 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,615 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:44,616 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,706 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:23:46,745 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:23:46,759 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:46,759 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:46,759 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:46,760 - __main__ - ERROR - Error processing image in document: expected str, bytes or os.PathLike object, not ImagePart
2025-07-05 12:23:46,761 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,761 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,762 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,763 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,763 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,764 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,764 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,765 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,766 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,766 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,767 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,768 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,768 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,769 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,769 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,770 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,771 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,771 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,772 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,772 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,773 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,774 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,774 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,775 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,776 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,776 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,777 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,778 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,779 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,779 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,780 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,781 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,782 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,782 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,783 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,784 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,784 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,785 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,785 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,786 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,787 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,787 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,788 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,788 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,789 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,789 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,790 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,791 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,792 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,793 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,794 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,794 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,795 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,796 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,797 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,798 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,799 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,799 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,800 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,800 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,801 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,801 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,802 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,803 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,803 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,804 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,805 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,805 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,806 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,807 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,808 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,809 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,810 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,810 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,811 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,812 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,814 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,815 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,815 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,816 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,817 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,817 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,819 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,820 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,820 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,821 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,822 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,823 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,824 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,825 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,825 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,826 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,827 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,827 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,828 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,829 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,830 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,830 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,831 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,832 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,833 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,833 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,834 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:46,834 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:23:48,522 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:25:32,473 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 12:25:45,084 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:25:45,110 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,112 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,113 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,114 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,115 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,116 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,116 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,117 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,119 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,120 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,123 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,125 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,127 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,128 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,130 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,132 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,133 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,134 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,135 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,136 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,137 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,139 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,140 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,142 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,143 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,145 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,147 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,149 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,150 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,151 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,152 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,153 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,154 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,155 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,156 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,157 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,158 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,159 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,160 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,161 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,162 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,163 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,164 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,165 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,166 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,167 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,168 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,168 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,169 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,170 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,171 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,172 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,173 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,174 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,175 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,175 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,176 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,177 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,178 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,179 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,180 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,181 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,182 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,182 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,183 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,184 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,184 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,185 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,186 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,186 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,187 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,188 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,189 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,189 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,190 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,191 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,192 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,193 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,193 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,194 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,195 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,196 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,196 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,197 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,198 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,200 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,200 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,201 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,202 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,202 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,203 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,203 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,205 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,206 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,206 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,207 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,208 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,208 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,209 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,210 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,211 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,211 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,212 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:45,213 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,569 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:25:47,615 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:25:47,635 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,636 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,637 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,638 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,638 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,639 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,640 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,640 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,641 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,642 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,642 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,643 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,644 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,644 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,645 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,646 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,646 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,647 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,648 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,649 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,650 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,651 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,652 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,652 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,653 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,654 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,655 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,656 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,656 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,657 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,659 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,659 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,660 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,660 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,661 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,661 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,662 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,662 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,663 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,664 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,665 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,665 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,666 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,667 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,668 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,668 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,669 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,669 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,670 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,670 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,672 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,673 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,673 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,674 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,675 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,676 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,677 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,677 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,678 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,678 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,679 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,680 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,681 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,682 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,683 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,684 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,684 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,685 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,687 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,689 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,690 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,692 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,697 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,698 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,699 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,699 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,702 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,703 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,703 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,704 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,705 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,705 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,706 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,707 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,707 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,708 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,709 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,710 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,711 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,712 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,713 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,713 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,714 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,714 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,715 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,715 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,716 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,716 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,717 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,718 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,719 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,720 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,720 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:47,721 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:25:49,763 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 12:31:07,712 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:31:07,724 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,725 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,726 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,727 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,728 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,729 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,729 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,730 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,731 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,731 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,732 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,732 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,733 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,733 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,734 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,735 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,736 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,736 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,737 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,738 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,738 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,739 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,739 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,739 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,740 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,740 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,740 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,741 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,742 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,742 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,743 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,744 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,745 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,745 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,746 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,746 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,746 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,747 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,747 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,747 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,748 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,748 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,748 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,749 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,750 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,750 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,751 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,751 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,752 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,752 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,753 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,753 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,754 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,754 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,754 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,754 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,755 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,755 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,755 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,756 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,756 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,756 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,756 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,757 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,757 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,758 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,759 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,760 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,760 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,761 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,761 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,762 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,762 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,763 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,763 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,763 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,764 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,764 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,764 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,764 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,765 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,765 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,765 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,765 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,766 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,766 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,767 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,767 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,768 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,769 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,770 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,770 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,771 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,771 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,771 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,772 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,772 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,772 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,773 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,773 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,774 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,774 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,775 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:07,776 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:08,031 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.491517 seconds
2025-07-05 12:31:08,524 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.784970 seconds
2025-07-05 12:31:09,312 - __main__ - ERROR - Error processing document: Connection error.
2025-07-05 12:31:09,344 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 12:31:09,359 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,360 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,360 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,361 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,362 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,362 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,363 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,363 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,364 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,365 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,365 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,366 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,367 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,367 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,368 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,368 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,369 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,370 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,370 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,371 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,371 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,372 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,372 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,373 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,373 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,374 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,374 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,375 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,375 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,376 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,377 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,377 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,378 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,378 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,379 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,379 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,380 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,381 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,381 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,382 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,383 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,383 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,384 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,384 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,385 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,385 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,385 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,386 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,387 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,389 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,389 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,390 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,390 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,390 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,391 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,391 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,392 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,392 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,393 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,393 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,394 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,394 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,395 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,395 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,395 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,396 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,396 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,397 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,397 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,398 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,398 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,399 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,399 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,399 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,400 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,400 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,400 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,401 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,401 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,401 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,402 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,402 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,405 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,406 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,406 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,407 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,407 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,408 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,408 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,409 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,409 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,410 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,410 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,410 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,411 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,411 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,412 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,412 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,413 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,413 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,414 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,414 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,415 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,415 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 12:31:09,660 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.444451 seconds
2025-07-05 12:31:10,107 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.865117 seconds
2025-07-05 12:31:10,974 - __main__ - ERROR - Error processing document: Connection error.
2025-07-05 12:32:36,818 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 12:32:37,388 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.499837 seconds
2025-07-05 12:32:37,890 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.884435 seconds
2025-07-05 12:32:38,788 - __main__ - ERROR - Error processing document: Connection error.
2025-07-05 12:32:38,832 - __main__ - INFO - Received file: Business Case.pdf
2025-07-05 12:32:39,380 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.401147 seconds
2025-07-05 12:32:39,784 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.987293 seconds
2025-07-05 12:32:40,774 - __main__ - ERROR - Error processing document: Connection error.
2025-07-05 17:27:23,696 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 17:27:36,998 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 17:27:37,067 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,068 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,070 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,071 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,072 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,074 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,076 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,078 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,080 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,082 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,084 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,085 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,087 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,088 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,090 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,091 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,093 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,094 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,095 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,097 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,100 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,101 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,103 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,104 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,105 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,106 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,108 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,109 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,110 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,112 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,113 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,114 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,116 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,118 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,119 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,120 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,121 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,122 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,124 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,125 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,127 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,128 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,129 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,131 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,132 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,134 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,135 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,136 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,138 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,139 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,140 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,142 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,144 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,145 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,146 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,147 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,149 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,151 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,152 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,153 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,154 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,155 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,157 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,158 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,159 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,160 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,161 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,163 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,163 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,164 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,166 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,168 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,169 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,170 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,172 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,173 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,175 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,176 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,177 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,178 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,179 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,180 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,181 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,182 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,183 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,184 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,185 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,186 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,187 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,188 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,190 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,191 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,192 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,193 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,194 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,195 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,197 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,198 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,199 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,201 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,202 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,203 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,204 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:37,206 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,636 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 17:27:42,665 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 17:27:42,692 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,693 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,693 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,695 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,696 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,697 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,698 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,698 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,699 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,700 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,701 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,702 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,703 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,704 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,705 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,706 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,707 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,707 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,708 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,709 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,710 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,711 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,712 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,712 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,713 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,714 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,715 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,716 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,717 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,718 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,718 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,719 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,720 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,721 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,723 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,724 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,724 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,725 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,726 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,727 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,728 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,729 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,730 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,731 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,732 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,733 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,734 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,735 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,736 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,737 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,738 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,739 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,740 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,740 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,741 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,742 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,743 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,744 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,745 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,745 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,746 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,747 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,748 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,749 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,751 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,752 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,753 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,754 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,754 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,755 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,757 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,758 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,759 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,760 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,761 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,761 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,762 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,763 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,764 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,765 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,766 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,766 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,767 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,768 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,769 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,770 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,771 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,771 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,772 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,773 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,775 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,776 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,777 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,778 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,779 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,779 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,780 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,781 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,782 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,783 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,784 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,785 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,786 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:42,787 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:27:46,487 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 17:29:56,472 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 17:30:24,142 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 17:30:24,176 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,178 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,179 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,181 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,183 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,184 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,185 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,187 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,190 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,192 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,193 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,194 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,195 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,196 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,197 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,198 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,199 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,200 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,201 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,201 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,202 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,203 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,204 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,205 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,206 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,207 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,209 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,210 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,210 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,211 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,212 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,214 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,215 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,216 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,217 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,218 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,219 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,220 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,221 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,223 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,224 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,225 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,227 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,228 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,230 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,231 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,232 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,234 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,236 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,237 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,238 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,239 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,240 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,241 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,242 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,243 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,244 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,245 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,246 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,247 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,248 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,250 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,250 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,251 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,253 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,254 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,255 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,257 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,258 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,259 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,260 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,261 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,262 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,264 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,265 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,267 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,268 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,269 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,270 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,271 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,273 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,274 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,275 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,276 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,277 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,278 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,280 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,281 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,282 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,283 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,285 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,286 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,287 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,289 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,290 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,291 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,293 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,294 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,295 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,296 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,297 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,298 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,299 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:24,301 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:27,957 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 17:30:27,988 - __main__ - INFO - Received file: Business Case.docx
2025-07-05 17:30:28,010 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,011 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,013 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,014 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,015 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,016 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,017 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,018 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,019 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,020 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,021 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,022 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,024 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,025 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,026 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,027 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,028 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,029 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,030 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,031 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,032 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,033 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,034 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,035 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,036 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,037 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,038 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,038 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,039 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,040 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,042 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,043 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,044 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,045 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,046 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,047 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,047 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,048 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,049 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,049 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,050 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,051 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,052 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,053 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,054 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,054 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,055 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,056 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,057 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,057 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,058 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,059 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,060 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,060 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,061 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,062 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,062 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,063 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,064 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,065 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,066 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,068 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,068 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,069 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,070 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,072 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,073 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,074 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,074 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,075 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,076 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,077 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,078 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,079 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,080 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,081 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,082 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,083 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,083 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,084 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,084 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,085 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,086 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,087 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,088 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,089 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,090 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,091 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,092 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,092 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,093 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,094 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,095 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,095 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,096 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,096 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,097 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,098 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,099 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,099 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,100 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,101 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,101 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:28,102 - __main__ - ERROR - Error processing run: BaseOxmlElement.xpath() got an unexpected keyword argument 'namespaces'
2025-07-05 17:30:31,159 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 17:47:41,537 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 17:49:35,732 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 17:50:09,474 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 23:27:18,372 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 23:27:28,754 - __main__ - ERROR - Error processing image 1 on page 1: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpjjf7bahu.pdf')
    <class 'tuple'>: (19, 0, 1600, 783, 8, 'DeviceRGB', '', 'Image19', 'DCTDecode', 0)

2025-07-05 23:27:28,830 - __main__ - ERROR - Error processing image 1 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpjjf7bahu.pdf')
    <class 'tuple'>: (29, 0, 1600, 481, 8, 'DeviceRGB', '', 'Image29', 'DCTDecode', 0)

2025-07-05 23:27:28,856 - __main__ - ERROR - Error processing image 2 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpjjf7bahu.pdf')
    <class 'tuple'>: (30, 0, 581, 325, 8, 'DeviceRGB', '', 'Image30', 'FlateDecode', 0)

2025-07-05 23:27:28,885 - __main__ - ERROR - Error processing image 1 on page 3: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpjjf7bahu.pdf')
    <class 'tuple'>: (33, 0, 1070, 708, 8, 'DeviceRGB', '', 'Image33', 'DCTDecode', 0)

2025-07-05 23:27:28,891 - __main__ - WARNING - Failed to delete temporary PDF file C:\Users\sharv\AppData\Local\Temp\tmpjjf7bahu.pdf: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpjjf7bahu.pdf'
2025-07-05 23:27:32,187 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:27:32,256 - __main__ - ERROR - Unhandled exception: object str can't be used in 'await' expression
Traceback (most recent call last):
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\errors.py", line 165, in __call__
    await self.app(scope, receive, _send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\cors.py", line 93, in __call__
    await self.simple_response(scope, receive, send, request_headers=headers)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\cors.py", line 144, in simple_response
    await self.app(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 288, in handle
    await self.app(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 76, in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 73, in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\fastapi\routing.py", line 301, in app
    raw_response = await run_endpoint_function(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<3 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\fastapi\routing.py", line 212, in run_endpoint_function
    return await dependant.call(**values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 586, in convert_file
    processed_markdown = await process_document_with_groq(markdown, images, file.filename)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: object str can't be used in 'await' expression

2025-07-05 23:27:32,329 - __main__ - ERROR - Error processing image 1 on page 1: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmppzp2sdq3.pdf')
    <class 'tuple'>: (19, 0, 1600, 783, 8, 'DeviceRGB', '', 'Image19', 'DCTDecode', 0)

2025-07-05 23:27:32,354 - __main__ - ERROR - Error processing image 1 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmppzp2sdq3.pdf')
    <class 'tuple'>: (29, 0, 1600, 481, 8, 'DeviceRGB', '', 'Image29', 'DCTDecode', 0)

2025-07-05 23:27:32,375 - __main__ - ERROR - Error processing image 2 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmppzp2sdq3.pdf')
    <class 'tuple'>: (30, 0, 581, 325, 8, 'DeviceRGB', '', 'Image30', 'FlateDecode', 0)

2025-07-05 23:27:32,404 - __main__ - ERROR - Error processing image 1 on page 3: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmppzp2sdq3.pdf')
    <class 'tuple'>: (33, 0, 1070, 708, 8, 'DeviceRGB', '', 'Image33', 'DCTDecode', 0)

2025-07-05 23:27:32,410 - __main__ - WARNING - Failed to delete temporary PDF file C:\Users\sharv\AppData\Local\Temp\tmppzp2sdq3.pdf: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmppzp2sdq3.pdf'
2025-07-05 23:27:35,157 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:27:35,167 - __main__ - ERROR - Unhandled exception: object str can't be used in 'await' expression
Traceback (most recent call last):
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\errors.py", line 165, in __call__
    await self.app(scope, receive, _send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\cors.py", line 93, in __call__
    await self.simple_response(scope, receive, send, request_headers=headers)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\cors.py", line 144, in simple_response
    await self.app(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\middleware\exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 288, in handle
    await self.app(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 76, in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\starlette\routing.py", line 73, in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\fastapi\routing.py", line 301, in app
    raw_response = await run_endpoint_function(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<3 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\fastapi\routing.py", line 212, in run_endpoint_function
    return await dependant.call(**values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 586, in convert_file
    processed_markdown = await process_document_with_groq(markdown, images, file.filename)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: object str can't be used in 'await' expression

2025-07-05 23:31:18,452 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 23:31:26,953 - __main__ - ERROR - Error processing image 1 on page 1: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpea36it12.pdf')
    <class 'tuple'>: (19, 0, 1600, 783, 8, 'DeviceRGB', '', 'Image19', 'DCTDecode', 0)

2025-07-05 23:31:26,989 - __main__ - ERROR - Error processing image 1 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpea36it12.pdf')
    <class 'tuple'>: (29, 0, 1600, 481, 8, 'DeviceRGB', '', 'Image29', 'DCTDecode', 0)

2025-07-05 23:31:27,008 - __main__ - ERROR - Error processing image 2 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpea36it12.pdf')
    <class 'tuple'>: (30, 0, 581, 325, 8, 'DeviceRGB', '', 'Image30', 'FlateDecode', 0)

2025-07-05 23:31:27,033 - __main__ - ERROR - Error processing image 1 on page 3: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpea36it12.pdf')
    <class 'tuple'>: (33, 0, 1070, 708, 8, 'DeviceRGB', '', 'Image33', 'DCTDecode', 0)

2025-07-05 23:31:27,039 - __main__ - WARNING - Failed to delete temporary PDF file C:\Users\sharv\AppData\Local\Temp\tmpea36it12.pdf: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpea36it12.pdf'
2025-07-05 23:31:28,459 - __main__ - ERROR - Error processing image 1 on page 1: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpvt0dg_v8.pdf')
    <class 'tuple'>: (19, 0, 1600, 783, 8, 'DeviceRGB', '', 'Image19', 'DCTDecode', 0)

2025-07-05 23:31:28,480 - __main__ - ERROR - Error processing image 1 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpvt0dg_v8.pdf')
    <class 'tuple'>: (29, 0, 1600, 481, 8, 'DeviceRGB', '', 'Image29', 'DCTDecode', 0)

2025-07-05 23:31:28,499 - __main__ - ERROR - Error processing image 2 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpvt0dg_v8.pdf')
    <class 'tuple'>: (30, 0, 581, 325, 8, 'DeviceRGB', '', 'Image30', 'FlateDecode', 0)

2025-07-05 23:31:28,524 - __main__ - ERROR - Error processing image 1 on page 3: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpvt0dg_v8.pdf')
    <class 'tuple'>: (33, 0, 1070, 708, 8, 'DeviceRGB', '', 'Image33', 'DCTDecode', 0)

2025-07-05 23:31:28,529 - __main__ - WARNING - Failed to delete temporary PDF file C:\Users\sharv\AppData\Local\Temp\tmpvt0dg_v8.pdf: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpvt0dg_v8.pdf'
2025-07-05 23:31:30,903 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:31:30,915 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:34:05,105 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-05 23:34:31,157 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:34:31,162 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:34:33,969 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:34:34,199 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 12:03:29,426 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 12:03:50,311 - __main__ - ERROR - Error processing image 1 on page 1: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmp2ta0lo9q.pdf')
    <class 'tuple'>: (19, 0, 1600, 783, 8, 'DeviceRGB', '', 'Image19', 'DCTDecode', 0)

2025-07-06 12:03:50,381 - __main__ - ERROR - Error processing image 1 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmp2ta0lo9q.pdf')
    <class 'tuple'>: (29, 0, 1600, 481, 8, 'DeviceRGB', '', 'Image29', 'DCTDecode', 0)

2025-07-06 12:03:50,403 - __main__ - ERROR - Error processing image 2 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmp2ta0lo9q.pdf')
    <class 'tuple'>: (30, 0, 581, 325, 8, 'DeviceRGB', '', 'Image30', 'FlateDecode', 0)

2025-07-06 12:03:50,421 - __main__ - ERROR - Error processing image 1 on page 3: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmp2ta0lo9q.pdf')
    <class 'tuple'>: (33, 0, 1070, 708, 8, 'DeviceRGB', '', 'Image33', 'DCTDecode', 0)

2025-07-06 12:03:50,429 - __main__ - WARNING - Failed to delete temporary PDF file C:\Users\sharv\AppData\Local\Temp\tmp2ta0lo9q.pdf: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmp2ta0lo9q.pdf'
2025-07-06 12:03:53,671 - __main__ - ERROR - Error processing image 1 on page 1: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpnlhpxxan.pdf')
    <class 'tuple'>: (19, 0, 1600, 783, 8, 'DeviceRGB', '', 'Image19', 'DCTDecode', 0)

2025-07-06 12:03:53,693 - __main__ - ERROR - Error processing image 1 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpnlhpxxan.pdf')
    <class 'tuple'>: (29, 0, 1600, 481, 8, 'DeviceRGB', '', 'Image29', 'DCTDecode', 0)

2025-07-06 12:03:53,713 - __main__ - ERROR - Error processing image 2 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpnlhpxxan.pdf')
    <class 'tuple'>: (30, 0, 581, 325, 8, 'DeviceRGB', '', 'Image30', 'FlateDecode', 0)

2025-07-06 12:03:53,737 - __main__ - ERROR - Error processing image 1 on page 3: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpnlhpxxan.pdf')
    <class 'tuple'>: (33, 0, 1070, 708, 8, 'DeviceRGB', '', 'Image33', 'DCTDecode', 0)

2025-07-06 12:03:53,742 - __main__ - WARNING - Failed to delete temporary PDF file C:\Users\sharv\AppData\Local\Temp\tmpnlhpxxan.pdf: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpnlhpxxan.pdf'
2025-07-06 12:03:54,998 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 12:03:55,098 - __main__ - ERROR - Error processing image 1 on page 1: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpgtvj1ssk.pdf')
    <class 'tuple'>: (19, 0, 1600, 783, 8, 'DeviceRGB', '', 'Image19', 'DCTDecode', 0)

2025-07-06 12:03:55,120 - __main__ - ERROR - Error processing image 1 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpgtvj1ssk.pdf')
    <class 'tuple'>: (29, 0, 1600, 481, 8, 'DeviceRGB', '', 'Image29', 'DCTDecode', 0)

2025-07-06 12:03:55,138 - __main__ - ERROR - Error processing image 2 on page 2: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpgtvj1ssk.pdf')
    <class 'tuple'>: (30, 0, 581, 325, 8, 'DeviceRGB', '', 'Image30', 'FlateDecode', 0)

2025-07-06 12:03:55,161 - __main__ - ERROR - Error processing image 1 on page 3: Unrecognised args for constructing Pixmap:
    <class 'pymupdf.Document'>: Document('C:\Users\sharv\AppData\Local\Temp\tmpgtvj1ssk.pdf')
    <class 'tuple'>: (33, 0, 1070, 708, 8, 'DeviceRGB', '', 'Image33', 'DCTDecode', 0)

2025-07-06 12:03:55,165 - __main__ - WARNING - Failed to delete temporary PDF file C:\Users\sharv\AppData\Local\Temp\tmpgtvj1ssk.pdf: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpgtvj1ssk.pdf'
2025-07-06 12:03:56,414 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 12:03:57,896 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 12:17:51,334 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 12:18:15,275 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:10:59,470 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 16:11:14,304 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:11:14,338 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:11:15,356 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:11:16,366 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:11:23,609 - __main__ - ERROR - Error processing image on page 1: a bytes-like object is required, not 'str'
2025-07-06 16:11:23,629 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 16:11:23,629 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 16:11:23,632 - __main__ - ERROR - Error processing image on page 3: a bytes-like object is required, not 'str'
2025-07-06 16:11:24,352 - __main__ - ERROR - Error processing image on page 1: a bytes-like object is required, not 'str'
2025-07-06 16:11:24,374 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 16:11:24,375 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 16:11:24,379 - __main__ - ERROR - Error processing image on page 3: a bytes-like object is required, not 'str'
2025-07-06 16:11:25,334 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:11:26,026 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:14:05,672 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 16:14:56,987 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:14:57,191 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:14:58,369 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 16:18:14,553 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 16:21:44,303 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 16:21:55,257 - __main__ - ERROR - Error processing document: name 'prompt' is not defined
2025-07-06 16:21:55,264 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 462, in process_document_with_groq
    "content": prompt
               ^^^^^^
NameError: name 'prompt' is not defined

2025-07-06 16:34:07,032 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 16:35:52,212 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 18:13:38,322 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 18:22:53,669 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 18:37:07,966 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 18:37:35,983 - __main__ - ERROR - Error processing image on page 1: a bytes-like object is required, not 'str'
2025-07-06 18:37:35,989 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:36,011 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 18:37:36,013 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:36,014 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 18:37:36,016 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:36,021 - __main__ - ERROR - Error processing image on page 3: a bytes-like object is required, not 'str'
2025-07-06 18:37:36,022 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:36,857 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-06 18:37:36,862 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-06 18:37:36,878 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 573, in process_document_with_groq
    response = await client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<11 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\resources\chat\completions.py", line 750, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
    ...<42 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1752, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1566, in request
    raise self._make_status_error_from_response(err.response) from None
groq.BadRequestError: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}

2025-07-06 18:37:36,927 - __main__ - ERROR - Error processing image on page 1: a bytes-like object is required, not 'str'
2025-07-06 18:37:36,929 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:36,943 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 18:37:36,944 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:36,945 - __main__ - ERROR - Error processing image on page 2: a bytes-like object is required, not 'str'
2025-07-06 18:37:36,946 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:36,949 - __main__ - ERROR - Error processing image on page 3: a bytes-like object is required, not 'str'
2025-07-06 18:37:36,950 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 408, in extract_text_and_images_from_pdf
    if ',' in img_data:  # Handle data URL format
       ^^^^^^^^^^^^^^^
TypeError: a bytes-like object is required, not 'str'

2025-07-06 18:37:37,516 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-06 18:37:37,519 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}
2025-07-06 18:37:37,523 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 573, in process_document_with_groq
    response = await client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<11 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\resources\chat\completions.py", line 750, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
    ...<42 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1752, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1566, in request
    raise self._make_status_error_from_response(err.response) from None
groq.BadRequestError: Error code: 400 - {'error': {'message': 'The model `mixtral-8x7b-32768` has been decommissioned and is no longer supported. Please refer to https://console.groq.com/docs/deprecations for a recommendation on which model to use instead.', 'type': 'invalid_request_error', 'code': 'model_decommissioned'}}

2025-07-06 18:41:24,751 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 18:43:49,893 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 18:54:50,970 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 18:58:22,725 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 19:03:41,252 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 19:05:53,812 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 19:06:06,874 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-06 19:06:06,876 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-06 19:06:06,879 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 577, in process_document_with_groq
    response = await client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<11 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\resources\chat\completions.py", line 750, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
    ...<42 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1752, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1566, in request
    raise self._make_status_error_from_response(err.response) from None
groq.BadRequestError: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}

2025-07-06 19:06:06,882 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-06 19:06:06,884 - __main__ - ERROR - Error processing document: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-06 19:06:06,887 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 577, in process_document_with_groq
    response = await client.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<11 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\resources\chat\completions.py", line 750, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
    ...<42 lines>...
    )
    ^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1752, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\groq\_base_client.py", line 1566, in request
    raise self._make_status_error_from_response(err.response) from None
groq.BadRequestError: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}

2025-07-06 19:07:12,351 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 19:09:30,853 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 19:10:38,373 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 20:50:29,750 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 20:50:46,834 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 20:50:50,524 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 20:50:50,573 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 20:50:53,104 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 20:55:13,146 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 20:55:23,041 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 20:57:57,348 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 20:59:35,689 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 20:59:38,726 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 20:59:38,776 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 20:59:41,437 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:01:03,743 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 21:01:09,741 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:01:09,818 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 21:01:14,412 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:01:53,404 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 21:02:02,005 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:02:04,822 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:02:04,892 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:02:07,208 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:02:24,656 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 21:02:29,962 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:02:30,025 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 21:02:35,624 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:02:45,542 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:02:47,913 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:02:47,980 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:02:51,100 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:15:10,872 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 21:15:46,500 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:15:48,223 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:15:48,288 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:15:49,824 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:53:41,406 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 21:53:43,817 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:53:43,882 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 21:53:46,378 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:58:27,827 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 21:58:38,912 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:58:41,571 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:58:41,625 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 21:58:44,065 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:59:52,379 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 21:59:56,635 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:59:56,969 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:59:57,428 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 21:59:57,543 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 22:00:01,705 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:00:02,031 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:00:02,488 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:01:08,518 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 22:01:42,392 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 22:01:50,666 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 22:01:55,142 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:01:55,501 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:01:56,178 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:01:56,182 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:
```
**Purpose**
-----------

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's [Managing your API clients documentation](https://example.com).

### To generate CrowdStrike API credentials:

1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.
```
Let me know if you need any further assistance!

![](http://localhost:5000/uploads/Business_Case_1.png)

Here is the formatted text in Markdown:

### 3. Create a New API Client

1. On the API clients and keys page, click **Add new API client**.
2. In the **Add new API client** pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration

![](http://localhost:5000/uploads/Business_Case_2.png)

Here is the formatted text in Markdown:

### Click Add to Save the API Client

Click Add to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for Security Standards)

#### Steps

1. Navigate to **Host setup and management** > **IP Allowlist Management**.
2. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)


2025-07-06 22:01:56,288 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 22:01:59,869 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:02:00,480 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:02:01,068 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:02:01,071 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:
```
Purpose
=======
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

Steps for CrowdStrike API Credentials
-----------------------------------
**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's [Managing your API clients documentation](https://example.com).

To generate CrowdStrike API credentials:
1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.
```
Let me know if you need any further assistance!

![](http://localhost:5000/uploads/Business_Case_1.png)

Here is the formatted text in Markdown:

### 3. Create a New API Client

1. On the API clients and keys page, click **Add new API client**.
2. In the **Add new API client** pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration

![](http://localhost:5000/uploads/Business_Case_2.png)

Here is the formatted text in Markdown:

### Click Add to Save the API Client

Click Add to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for Security Standards)

#### Steps

1. Navigate to **Host setup and management** > **IP Allowlist Management**.
2. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)


2025-07-06 22:02:08,326 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:02:10,965 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:02:10,968 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**
**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:02:11,039 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:02:13,493 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:02:13,495 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**
**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:35:49,529 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 22:35:58,687 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:36:00,472 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:36:00,477 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**

**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:36:00,554 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:36:02,089 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:36:02,091 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**
**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:40:01,701 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 22:40:05,558 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:40:05,893 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:40:06,342 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:40:06,348 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:
```
Purpose
=======
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

Steps for CrowdStrike API Credentials
-----------------------------------
**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's [Managing your API clients documentation](https://example.com).

To generate CrowdStrike API credentials:
1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.
```
Let me know if you need any further assistance!

![](http://localhost:5000/uploads/Business_Case_1.png)

Here is the formatted text in Markdown:

### 3. Create a New API Client

1. On the API clients and keys page, click **Add new API client**.
2. In the **Add new API client** pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration

![](http://localhost:5000/uploads/Business_Case_2.png)

Here is the formatted text in Markdown:

### Click Add to Save the API Client

Click Add to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for Security Standards)

#### Steps

1. Navigate to **Host setup and management** > **IP Allowlist Management**.
2. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)


2025-07-06 22:40:06,463 - __main__ - INFO - Received file: Business Case.pdf
2025-07-06 22:40:10,154 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:40:10,826 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:40:11,849 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:40:11,852 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:
```
Purpose
=======
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

Steps for CrowdStrike API Credentials
-----------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's [Managing your API clients documentation](https://example.com).

To generate CrowdStrike API credentials:

1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.
```
Let me know if you need any further assistance!

![](http://localhost:5000/uploads/Business_Case_1.png)

Here is the formatted text in Markdown:

### 3. Create a New API Client

1. On the API clients and keys page, click **Add new API client**.
2. In the **Add new API client** pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration

![](http://localhost:5000/uploads/Business_Case_2.png)

Here is the formatted text in Markdown:

### Click Add to Save the API Client

Click Add to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for Security Standards)

#### Steps

1. Navigate to **Host setup and management** > **IP Allowlist Management**.
2. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)


2025-07-06 22:46:15,351 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 22:46:32,058 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:46:35,539 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:46:35,548 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**

**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:46:35,651 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:46:37,912 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:46:37,918 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**

**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:52:32,190 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 22:52:46,292 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:52:49,160 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:52:49,322 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-06 22:52:49,324 - __main__ - INFO - Formatted chunks: ["Here is the formatted text in Markdown:\n\n**Purpose:**\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\n**Steps for CrowdStrike API Credentials:**\n\n**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. **Log in to the Falcon Console.**\n2. **Select Support and resources > API clients and keys.**\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - **Your desired Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n   * Click **Add** to save the API client and generate the client ID and secret.\n\n**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n**Share the API Client ID, Secret, and Base URL with the team.**\n\n**Optional Steps (Recommended for security standards):**\n\n5. **Navigate to Host setup and management > IP Allowlist Management.**\n6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs."]
2025-07-06 22:52:49,327 - __main__ - INFO - Final markdown output: ["Here is the formatted text in Markdown:\n\n**Purpose:**\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\n**Steps for CrowdStrike API Credentials:**\n\n**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. **Log in to the Falcon Console.**\n2. **Select Support and resources > API clients and keys.**\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - **Your desired Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n   * Click **Add** to save the API client and generate the client ID and secret.\n\n**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n**Share the API Client ID, Secret, and Base URL with the team.**\n\n**Optional Steps (Recommended for security standards):**\n\n5. **Navigate to Host setup and management > IP Allowlist Management.**\n6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs."]
2025-07-06 22:52:49,329 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**

**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:52:49,443 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:52:51,771 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:52:51,825 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-06 22:52:51,829 - __main__ - INFO - Formatted chunks: ["Here is the formatted text in Markdown:\n\n**Purpose:**\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\n**Steps for CrowdStrike API Credentials:**\n**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. **Log in to the Falcon Console.**\n2. **Select Support and resources > API clients and keys.**\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - **Your desired Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n   * Click **Add** to save the API client and generate the client ID and secret.\n\n**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n**Share the API Client ID, Secret, and Base URL with the team.**\n\n**Optional Steps (Recommended for security standards):**\n\n5. **Navigate to Host setup and management > IP Allowlist Management.**\n6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs."]
2025-07-06 22:52:51,831 - __main__ - INFO - Final markdown output: ["Here is the formatted text in Markdown:\n\n**Purpose:**\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\n**Steps for CrowdStrike API Credentials:**\n**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. **Log in to the Falcon Console.**\n2. **Select Support and resources > API clients and keys.**\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - **Your desired Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n   * Click **Add** to save the API client and generate the client ID and secret.\n\n**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n**Share the API Client ID, Secret, and Base URL with the team.**\n\n**Optional Steps (Recommended for security standards):**\n\n5. **Navigate to Host setup and management > IP Allowlist Management.**\n6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs."]
2025-07-06 22:52:51,834 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**
**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 22:59:48,696 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:59:51,233 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:59:51,280 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-06 22:59:51,282 - __main__ - INFO - Formatted chunks: ["Here is the formatted text in Markdown:\n```\nPurpose\n=======\n\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\nSteps for CrowdStrike API Credentials\n------------------------------------\n\n**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. Log in to the Falcon Console.\n2. Select **Support and resources** > **API clients and keys**.\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - Your desired **Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n\n**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n5. Click **Add** to save the API client and generate the client ID and secret.\n6. Share the API Client ID, Secret, and Base URL with the team.\n\nOptional Steps (Recommended for security standards)\n---------------------------------------------------\n\n### 5. Navigate to **Host setup and management** > **IP Allowlist Management**.\n### 6. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.\n```\nLet me know if you need any further assistance!"]
2025-07-06 22:59:51,283 - __main__ - INFO - Final markdown output: ["Here is the formatted text in Markdown:\n```\nPurpose\n=======\n\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\nSteps for CrowdStrike API Credentials\n------------------------------------\n\n**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. Log in to the Falcon Console.\n2. Select **Support and resources** > **API clients and keys**.\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - Your desired **Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n\n**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n5. Click **Add** to save the API client and generate the client ID and secret.\n6. Share the API Client ID, Secret, and Base URL with the team.\n\nOptional Steps (Recommended for security standards)\n---------------------------------------------------\n\n### 5. Navigate to **Host setup and management** > **IP Allowlist Management**.\n### 6. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.\n```\nLet me know if you need any further assistance!"]
2025-07-06 22:59:51,287 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:
```
Purpose
=======

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

Steps for CrowdStrike API Credentials
------------------------------------

**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - Your desired **Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

5. Click **Add** to save the API client and generate the client ID and secret.
6. Share the API Client ID, Secret, and Base URL with the team.

Optional Steps (Recommended for security standards)
---------------------------------------------------

### 5. Navigate to **Host setup and management** > **IP Allowlist Management**.
### 6. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
```
Let me know if you need any further assistance!
2025-07-06 22:59:51,417 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 22:59:53,685 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 22:59:53,728 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-06 22:59:53,731 - __main__ - INFO - Formatted chunks: ["Here is the formatted text in Markdown:\n\n**Purpose:**\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\n**Steps for CrowdStrike API Credentials:**\n**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. **Log in to the Falcon Console.**\n2. **Select Support and resources > API clients and keys.**\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - **Your desired Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n   * Click **Add** to save the API client and generate the client ID and secret.\n\n**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n**Share the API Client ID, Secret, and Base URL with the team.**\n\n**Optional Steps (Recommended for security standards):**\n\n5. **Navigate to Host setup and management > IP Allowlist Management.**\n6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs."]
2025-07-06 22:59:53,734 - __main__ - INFO - Final markdown output: ["Here is the formatted text in Markdown:\n\n**Purpose:**\nCrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.\n\n**Steps for CrowdStrike API Credentials:**\n**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.\n\nThe following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:\n\n1. **Log in to the Falcon Console.**\n2. **Select Support and resources > API clients and keys.**\n\nOn the API clients and keys page, click **Add new API client**.\n\n4. In the **Add new API client** pop-up:\n   * Input the following:\n     - **Your desired Client Name**\n     - **Description**\n   * Select the API scopes as per your requirement for the integration\n   * Click **Add** to save the API client and generate the client ID and secret.\n\n**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.\n\n**Share the API Client ID, Secret, and Base URL with the team.**\n\n**Optional Steps (Recommended for security standards):**\n\n5. **Navigate to Host setup and management > IP Allowlist Management.**\n6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs."]
2025-07-06 22:59:53,737 - __main__ - INFO - Final markdown output: Here is the formatted text in Markdown:

**Purpose:**
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials:**
**NOTE:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

1. **Log in to the Falcon Console.**
2. **Select Support and resources > API clients and keys.**

On the API clients and keys page, click **Add new API client**.

4. In the **Add new API client** pop-up:
   * Input the following:
     - **Your desired Client Name**
     - **Description**
   * Select the API scopes as per your requirement for the integration
   * Click **Add** to save the API client and generate the client ID and secret.

**NOTE:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

**Share the API Client ID, Secret, and Base URL with the team.**

**Optional Steps (Recommended for security standards):**

5. **Navigate to Host setup and management > IP Allowlist Management.**
6. **Select Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.
2025-07-06 23:06:36,046 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 23:07:37,877 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 23:07:41,065 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 23:07:41,076 - __main__ - INFO - Final markdown output: Here is the formatted document in professional, clean Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
=====================================

**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and Resources > API Clients and Keys

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for Security Standards)
---------------------------------------------------

### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

[[IMAGE_X]]

![](http://localhost:5000/uploads/Business_Case_1.jpeg)


![](http://localhost:5000/uploads/Business_Case_2.jpeg)


![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-06 23:11:22,747 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 23:12:23,545 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 23:12:26,551 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 23:12:26,559 - __main__ - INFO - Final markdown output: Here is the formatted document in professional, clean Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
=====================================

**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

[[IMAGE_X]]

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

Let me know if this meets your requirements!

![](http://localhost:5000/uploads/Business_Case_1.jpeg)


![](http://localhost:5000/uploads/Business_Case_2.jpeg)


![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-06 23:12:26,698 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 23:12:29,325 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 23:12:29,338 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
=====================================

**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

[[IMAGE_X]]

![](http://localhost:5000/uploads/Business_Case_1.jpeg)


![](http://localhost:5000/uploads/Business_Case_2.jpeg)


![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-06 23:40:02,501 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 23:40:13,408 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 23:40:16,641 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 23:40:16,653 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
=====================================

**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the **API scopes** as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

[[IMAGE_X]]

![](http://localhost:5000/uploads/Business_Case_1.jpeg)


![](http://localhost:5000/uploads/Business_Case_2.jpeg)


![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-06 23:40:16,748 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 23:40:19,197 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 23:40:19,199 - __main__ - INFO - Final markdown output: Here is the formatted document in professional, clean Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
=====================================

**Note**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and Resources > API Clients and Keys

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**Note**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for Security Standards)
---------------------------------------------------

### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

[[IMAGE_X]]

![](http://localhost:5000/uploads/Business_Case_1.jpeg)


![](http://localhost:5000/uploads/Business_Case_2.jpeg)


![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-06 23:43:33,245 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 23:45:29,738 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-06 23:45:54,518 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 23:45:55,969 - __main__ - INFO - Processing document with 4 placeholders
2025-07-06 23:45:55,971 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-06 23:45:58,661 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 23:45:58,666 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-06 23:45:58,668 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.jpeg)
2025-07-06 23:45:58,681 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.jpeg)
2025-07-06 23:45:58,682 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-06 23:45:58,685 - __main__ - INFO - Replaced [[IMAGE_4]] with ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-06 23:45:58,687 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-06 23:45:58,689 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-06 23:45:58,690 - __main__ - INFO - Final markdown output length: 1842
2025-07-06 23:45:58,693 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-06 23:45:58,824 - __main__ - INFO - Received file: Business Case.docx
2025-07-06 23:46:00,040 - __main__ - INFO - Processing document with 4 placeholders
2025-07-06 23:46:00,041 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-06 23:46:01,939 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 23:46:01,944 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-06 23:46:01,948 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.jpeg)
2025-07-06 23:46:01,950 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.jpeg)
2025-07-06 23:46:01,953 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-06 23:46:01,955 - __main__ - INFO - Replaced [[IMAGE_4]] with ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-06 23:46:01,957 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-06 23:46:01,959 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-06 23:46:01,961 - __main__ - INFO - Final markdown output length: 1842
2025-07-06 23:46:01,963 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 14:47:28,536 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 14:47:39,043 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 14:47:39,692 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 14:47:39,693 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 14:47:41,096 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 14:47:41,105 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 14:47:41,106 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.jpeg)
2025-07-07 14:47:41,106 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.jpeg)
2025-07-07 14:47:41,107 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:47:41,107 - __main__ - INFO - Replaced [[IMAGE_4]] with ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:47:41,107 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:47:41,108 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:47:41,108 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 14:47:41,109 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 14:47:41,140 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 14:47:41,726 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 14:47:41,727 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 14:47:42,815 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 14:47:42,819 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 14:47:42,819 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.jpeg)
2025-07-07 14:47:42,819 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.jpeg)
2025-07-07 14:47:42,820 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:47:42,820 - __main__ - INFO - Replaced [[IMAGE_4]] with ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:47:42,820 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:47:42,821 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:47:42,821 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 14:47:42,821 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 14:55:06,259 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 14:55:15,373 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 14:55:16,952 - __main__ - INFO - Processing document with 3 placeholders
2025-07-07 14:55:16,953 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.png)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.png)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)'}
2025-07-07 14:55:18,168 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 14:55:18,172 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing you...
2025-07-07 14:55:18,173 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.png)
2025-07-07 14:55:18,173 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.png)
2025-07-07 14:55:18,174 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:55:18,175 - __main__ - INFO - Final markdown output length: 1596
2025-07-07 14:55:18,175 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation.

#### To generate CrowdStrike API credentials:

1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.

![](http://localhost:5000/uploads/Business_Case_1.png)

3. On the API clients and keys page, click **Add new API client**.
4. In the Add new API client pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration.

![](http://localhost:5000/uploads/Business_Case_2.png)

* Click **Add** to save the API client and generate the client ID and secret.
**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible. Share the API Client ID, Secret, and Base URL with the team.

#### Optional Steps (Recommended for security standards):

* 5. Navigate to **Host setup and management** > **IP Allowlist Management**.
* 6. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:55:18,227 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 14:55:19,554 - __main__ - INFO - Processing document with 3 placeholders
2025-07-07 14:55:19,554 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.png)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.png)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)'}
2025-07-07 14:55:20,591 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 14:55:20,593 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing you...
2025-07-07 14:55:20,594 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.png)
2025-07-07 14:55:20,595 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.png)
2025-07-07 14:55:20,595 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:55:20,596 - __main__ - INFO - Final markdown output length: 1596
2025-07-07 14:55:20,596 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation.

#### To generate CrowdStrike API credentials:

1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.

![](http://localhost:5000/uploads/Business_Case_1.png)

3. On the API clients and keys page, click **Add new API client**.
4. In the Add new API client pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration.

![](http://localhost:5000/uploads/Business_Case_2.png)

* Click **Add** to save the API client and generate the client ID and secret.
**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible. Share the API Client ID, Secret, and Base URL with the team.

#### Optional Steps (Recommended for security standards):

* 5. Navigate to **Host setup and management** > **IP Allowlist Management**.
* 6. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:56:01,978 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 14:56:02,505 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 14:56:02,506 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 14:56:03,655 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 14:56:03,657 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 14:56:03,658 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.jpeg)
2025-07-07 14:56:03,658 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.jpeg)
2025-07-07 14:56:03,659 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:56:03,660 - __main__ - INFO - Replaced [[IMAGE_4]] with ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:56:03,660 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:56:03,661 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:56:03,661 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 14:56:03,662 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 14:56:03,708 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 14:56:04,177 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 14:56:04,178 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 14:56:05,299 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 14:56:05,301 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 14:56:05,302 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.jpeg)
2025-07-07 14:56:05,302 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.jpeg)
2025-07-07 14:56:05,303 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:56:05,303 - __main__ - INFO - Replaced [[IMAGE_4]] with ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:56:05,304 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 14:56:05,304 - __main__ - INFO - Appending missing image: ![](http://localhost:5000/uploads/Business_Case_4.jpeg)
2025-07-07 14:56:05,305 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 14:56:05,305 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:06:47,286 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:08:43,302 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 15:08:44,986 - __main__ - INFO - Processing document with 3 placeholders
2025-07-07 15:08:44,986 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.png)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.png)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)'}
2025-07-07 15:08:46,259 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:08:46,264 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing you...
2025-07-07 15:08:46,265 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.png)
2025-07-07 15:08:46,265 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.png)
2025-07-07 15:08:46,266 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 15:08:46,267 - __main__ - INFO - Final markdown output length: 1596
2025-07-07 15:08:46,267 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation.

#### To generate CrowdStrike API credentials:

1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.

![](http://localhost:5000/uploads/Business_Case_1.png)

3. On the API clients and keys page, click **Add new API client**.
4. In the Add new API client pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration.

![](http://localhost:5000/uploads/Business_Case_2.png)

* Click **Add** to save the API client and generate the client ID and secret.
**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible. Share the API Client ID, Secret, and Base URL with the team.

#### Optional Steps (Recommended for security standards):

* 5. Navigate to **Host setup and management** > **IP Allowlist Management**.
* 6. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 15:08:46,313 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 15:08:47,777 - __main__ - INFO - Processing document with 3 placeholders
2025-07-07 15:08:47,777 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.png)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.png)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)'}
2025-07-07 15:08:48,816 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:08:48,819 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing you...
2025-07-07 15:08:48,820 - __main__ - INFO - Replaced [[IMAGE_1]] with ![](http://localhost:5000/uploads/Business_Case_1.png)
2025-07-07 15:08:48,821 - __main__ - INFO - Replaced [[IMAGE_2]] with ![](http://localhost:5000/uploads/Business_Case_2.png)
2025-07-07 15:08:48,822 - __main__ - INFO - Replaced [[IMAGE_3]] with ![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 15:08:48,823 - __main__ - INFO - Final markdown output length: 1596
2025-07-07 15:08:48,823 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:
### Purpose
CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

### Steps for CrowdStrike API Credentials
**Note:** Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console. The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation.

#### To generate CrowdStrike API credentials:

1. Log in to the Falcon Console.
2. Select **Support and resources** > **API clients and keys**.

![](http://localhost:5000/uploads/Business_Case_1.png)

3. On the API clients and keys page, click **Add new API client**.
4. In the Add new API client pop-up:
	* Input the following:
		+ Your desired **Client Name**
		+ **Description**
	* Select the API scopes as per your requirement for the integration.

![](http://localhost:5000/uploads/Business_Case_2.png)

* Click **Add** to save the API client and generate the client ID and secret.
**Note:** Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible. Share the API Client ID, Secret, and Base URL with the team.

#### Optional Steps (Recommended for security standards):

* 5. Navigate to **Host setup and management** > **IP Allowlist Management**.
* 6. Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_3.png)
2025-07-07 15:09:02,440 - asyncio - ERROR - Exception in callback _ProactorBasePipeTransport._call_connection_lost()
handle: <Handle _ProactorBasePipeTransport._call_connection_lost()>
Traceback (most recent call last):
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\asyncio\events.py", line 89, in _run
    self._context.run(self._callback, *self._args)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\asyncio\proactor_events.py", line 165, in _call_connection_lost
    self._sock.shutdown(socket.SHUT_RDWR)
    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host
2025-07-07 15:13:05,700 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:13:15,183 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:13:15,703 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:13:15,703 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:13:17,060 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:13:17,064 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:13:17,065 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:13:17,066 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:13:17,104 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:13:17,580 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:13:17,581 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:13:18,693 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:13:18,696 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:13:18,697 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:13:18,697 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:20:02,152 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:20:20,972 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:20:21,532 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:20:21,532 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:20:22,894 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:20:22,896 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:20:22,897 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:20:22,897 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:20:22,924 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:20:23,290 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:20:23,291 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:20:24,365 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:20:24,367 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:20:24,367 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:20:24,367 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:25:04,913 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:25:13,501 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:25:14,014 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:25:14,014 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:25:15,429 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:25:15,434 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:25:15,434 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:25:15,435 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:25:15,436 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:25:15,491 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:25:16,006 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:25:16,007 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:25:17,117 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:25:17,120 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:25:17,121 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:25:17,121 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:25:17,122 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:29:50,065 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:29:59,074 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:29:59,790 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:29:59,791 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:30:01,175 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:30:01,179 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:30:01,180 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:30:01,181 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:30:01,182 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:30:01,256 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:30:01,748 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:30:01,749 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:30:02,836 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:30:02,838 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:30:02,839 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:30:02,840 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:30:02,842 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:31:08,524 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:31:50,452 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:31:51,130 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:31:51,131 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:31:52,463 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:31:52,465 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:31:52,465 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:31:52,466 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:31:52,466 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:31:52,528 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:31:53,045 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:31:53,046 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:31:54,149 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:31:54,150 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:31:54,151 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:31:54,151 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:31:54,152 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:32:48,162 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:36:44,631 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 15:37:17,480 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:37:18,018 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:37:18,019 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:37:19,432 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:37:19,436 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:37:19,437 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:37:19,438 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:37:19,439 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:37:19,501 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 15:37:19,985 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 15:37:19,985 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 15:37:21,092 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 15:37:21,094 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 15:37:21,095 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 15:37:21,096 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 15:37:21,097 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:37:51,779 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:37:53,114 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 16:37:53,116 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 16:37:54,478 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 16:37:54,490 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 16:37:54,496 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 16:37:54,497 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:37:54,502 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:37:54,599 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:37:55,846 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 16:37:55,846 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 16:37:57,242 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 16:37:57,246 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 16:37:57,247 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 16:37:57,248 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:37:57,251 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:40:18,983 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 16:40:46,581 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:40:47,978 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 16:40:47,980 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 16:40:49,692 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 16:40:49,698 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 16:40:49,708 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 16:40:49,710 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:40:49,714 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:40:49,781 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:40:51,128 - __main__ - INFO - Processing document with 4 placeholders
2025-07-07 16:40:51,131 - __main__ - INFO - Placeholder map: {'[[IMAGE_1]]': '![](http://localhost:5000/uploads/Business_Case_1.jpeg)', '[[IMAGE_2]]': '![](http://localhost:5000/uploads/Business_Case_2.jpeg)', '[[IMAGE_3]]': '![](http://localhost:5000/uploads/Business_Case_3.png)', '[[IMAGE_4]]': '![](http://localhost:5000/uploads/Business_Case_4.jpeg)'}
2025-07-07 16:40:52,564 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 16:40:52,566 - __main__ - INFO - LLM output before placeholder replacement: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps fol...
2025-07-07 16:40:52,567 - __main__ - INFO - Final markdown output length: 1842
2025-07-07 16:40:52,567 - __main__ - INFO - FINAL MARKDOWN OUTPUT: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:40:52,568 - __main__ - INFO - Final markdown output: Here is the formatted document in Markdown:

**Purpose**
==========

CrowdStrike API keys allow secure access to Falcon's security features, like threat detection and data retrieval. They help integrate CrowdStrike with other tools for automation and better security management.

**Steps for CrowdStrike API Credentials**
--------------------------------------

**NOTE**: Users must be assigned the Falcon Administrator role to create new API clients from the Falcon Console.

The following steps follow the process outlined in CrowdStrike's Managing your API clients documentation. To generate CrowdStrike API credentials:

### Step 1: Log in to the Falcon Console

### Step 2: Select Support and resources > API clients and keys

![](http://localhost:5000/uploads/Business_Case_1.jpeg)

On the API clients and keys page, click **Add new API client**.

### Step 3: Configure API Client

In the **Add new API client** pop-up:

* Input the following:
	+ Your desired **Client Name**
	+ **Description**
* Select the API scopes as per your requirement for the integration
* Click **Add** to save the API client and generate the client ID and secret.

**NOTE**: Save your API client secret somewhere safe. After the credential window is closed, the secret is no longer visible.

### Step 4: Share API Credentials

Share the API Client ID, Secret, and Base URL with the team.

### Optional Steps (Recommended for security standards)

#### Step 5: Configure IP Allowlist Management

Navigate to **Host setup and management > IP Allowlist Management**.

#### Step 6: Create IP Group

Select **Create IP Group**, and configure your CrowdStrike API to allowlist the Abnormal IPs.

![](http://localhost:5000/uploads/Business_Case_2.jpeg)

![](http://localhost:5000/uploads/Business_Case_3.png)


![](http://localhost:5000/uploads/Business_Case_4.jpeg)

2025-07-07 16:50:04,971 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 16:50:14,516 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:50:16,677 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 16:50:16,713 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:50:18,513 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 16:58:02,908 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 16:58:14,095 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:58:17,547 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 16:58:17,612 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 16:58:20,248 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 17:00:18,110 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 17:00:27,387 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 17:00:31,048 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 17:00:31,664 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 17:00:34,354 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 17:07:08,401 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 17:10:59,779 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 17:11:03,976 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 17:11:04,070 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 17:11:06,178 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-07 17:11:06,180 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.403958 seconds
2025-07-07 17:11:07,118 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-07 17:11:07,119 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.781901 seconds
2025-07-07 17:11:09,005 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-07 17:11:09,008 - __main__ - ERROR - Error processing document: no healthy upstream
2025-07-07 17:31:47,621 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 17:33:49,942 - __main__ - INFO - Received file: Python_Certificate.pdf
2025-07-07 17:33:50,044 - __main__ - ERROR - Error processing PDF: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmp6ebrsiyr.pdf'
2025-07-07 17:33:50,047 - __main__ - ERROR - Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 370, in extract_text_and_images_from_pdf
    os.unlink(temp_pdf_path)
    ~~~~~~~~~^^^^^^^^^^^^^^^
PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmp6ebrsiyr.pdf'

2025-07-07 18:40:15,198 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 18:40:25,941 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:40:25,943 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:40:25,943 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:40:25,943 - __main__ - INFO - Processing DOCX file
2025-07-07 18:40:25,980 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:40:27,976 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:40:27,980 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:40:28,004 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:40:28,005 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:40:28,005 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:40:28,006 - __main__ - INFO - Processing DOCX file
2025-07-07 18:40:28,039 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:40:29,707 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:40:29,709 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:47:17,852 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 18:47:35,893 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:47:35,894 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:47:35,895 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:47:35,895 - __main__ - INFO - Processing DOCX file
2025-07-07 18:47:35,937 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:47:37,963 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:47:37,967 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:47:38,010 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:47:38,011 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:47:38,012 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:47:38,012 - __main__ - INFO - Processing DOCX file
2025-07-07 18:47:38,048 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:47:39,830 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:47:39,833 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:49:25,907 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 18:49:40,167 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:49:40,168 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:49:40,168 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:49:40,169 - __main__ - INFO - Processing DOCX file
2025-07-07 18:49:40,200 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:49:42,193 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:49:42,198 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:49:42,230 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:49:42,231 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:49:42,231 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:49:42,232 - __main__ - INFO - Processing DOCX file
2025-07-07 18:49:42,262 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:49:43,927 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:49:43,929 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:50:32,335 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 18:52:53,086 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:52:53,087 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:52:53,088 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:52:53,088 - __main__ - INFO - Processing DOCX file
2025-07-07 18:52:53,119 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:52:55,034 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:52:55,037 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:52:55,070 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:52:55,071 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:52:55,071 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:52:55,072 - __main__ - INFO - Processing DOCX file
2025-07-07 18:52:55,097 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:52:56,798 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:52:56,801 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:55:45,256 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:55:45,257 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:55:45,257 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:55:45,257 - __main__ - INFO - Processing DOCX file
2025-07-07 18:55:45,284 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:55:46,932 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:55:46,935 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:55:46,980 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:55:46,981 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:55:46,981 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:55:46,981 - __main__ - INFO - Processing DOCX file
2025-07-07 18:55:47,003 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:55:48,694 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:55:48,696 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:58:22,309 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:58:22,310 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:58:22,310 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:58:22,310 - __main__ - INFO - Processing DOCX file
2025-07-07 18:58:22,327 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:58:23,811 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:58:23,813 - __main__ - INFO - Document processing completed successfully
2025-07-07 18:58:23,839 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 18:58:23,839 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 18:58:23,839 - __main__ - INFO - File size: 285804 bytes
2025-07-07 18:58:23,840 - __main__ - INFO - Processing DOCX file
2025-07-07 18:58:23,855 - __main__ - INFO - Extracted text length: 1419, Number of images: 4
2025-07-07 18:58:25,410 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 18:58:25,417 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:06:53,448 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:06:53,448 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:06:53,449 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:06:53,449 - __main__ - INFO - Processing PDF file
2025-07-07 19:06:53,524 - __main__ - ERROR - Error during document processing: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpl55tvu_8.pdf'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 395, in convert_file
    else:  # .docx
    
  File "C:\Users\sharv\Intern_project\backend\app.py", line 280, in extract_text_and_images_from_pdf
    if 'doc' in locals():
PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpl55tvu_8.pdf'

2025-07-07 19:14:12,259 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:14:19,946 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:14:19,948 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:14:19,949 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:14:19,950 - __main__ - INFO - Processing DOCX file
2025-07-07 19:14:20,033 - __main__ - INFO - Extracted text length: 1674, Number of images: 4
2025-07-07 19:14:20,034 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:16:05,623 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:16:11,288 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:16:11,289 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:16:11,289 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:16:11,289 - __main__ - INFO - Processing PDF file
2025-07-07 19:16:11,310 - __main__ - ERROR - Error during document processing: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpgkn00muv.pdf'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 385, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 270, in extract_text_and_images_from_pdf
    os.unlink(temp_pdf_path)
    ~~~~~~~~~^^^^^^^^^^^^^^^
PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmpgkn00muv.pdf'

2025-07-07 19:17:12,654 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:17:12,654 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:17:12,655 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:17:12,655 - __main__ - INFO - Processing PDF file
2025-07-07 19:17:12,683 - __main__ - ERROR - Error during document processing: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmp2ilw7kur.pdf'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 385, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 270, in extract_text_and_images_from_pdf
    if 'doc' in locals():
PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmp2ilw7kur.pdf'

2025-07-07 19:17:18,814 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:17:18,814 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:17:18,815 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:17:18,815 - __main__ - INFO - Processing DOCX file
2025-07-07 19:17:18,858 - __main__ - INFO - Extracted text length: 1674, Number of images: 4
2025-07-07 19:17:18,859 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:17:51,751 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:17:51,751 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:17:51,751 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:17:51,752 - __main__ - INFO - Processing PDF file
2025-07-07 19:17:51,789 - __main__ - ERROR - Error during document processing: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmp5r2eawwe.pdf'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 385, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 270, in extract_text_and_images_from_pdf
    if 'doc' in locals():
PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sharv\\AppData\\Local\\Temp\\tmp5r2eawwe.pdf'

2025-07-07 19:21:14,093 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:21:22,032 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:21:22,033 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:21:22,034 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:21:22,034 - __main__ - INFO - Processing PDF file
2025-07-07 19:21:22,076 - __main__ - INFO - Extracted text length: 1433, Number of images: 0
2025-07-07 19:21:23,910 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 19:21:23,914 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:21:23,986 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:21:23,987 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:21:23,988 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:21:23,988 - __main__ - INFO - Processing PDF file
2025-07-07 19:21:24,010 - __main__ - INFO - Extracted text length: 1433, Number of images: 0
2025-07-07 19:21:25,658 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 19:21:25,660 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:25:02,726 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:25:15,223 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:25:15,224 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:25:15,225 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:25:15,225 - __main__ - INFO - Processing DOCX file
2025-07-07 19:25:15,246 - __main__ - INFO - Extracted text length: 1674, Number of images: 4
2025-07-07 19:25:15,247 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:27:14,262 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:27:14,262 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:27:14,262 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:27:14,263 - __main__ - INFO - Processing DOCX file
2025-07-07 19:27:14,289 - __main__ - INFO - Extracted text length: 1674, Number of images: 4
2025-07-07 19:27:14,290 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:37:19,321 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:37:36,111 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:37:36,112 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:37:36,112 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:37:36,112 - __main__ - INFO - Processing DOCX file
2025-07-07 19:37:36,135 - __main__ - INFO - Extracted text length: 1674, Number of images: 4
2025-07-07 19:37:36,136 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:38:50,372 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:38:50,373 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:38:50,373 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:38:50,374 - __main__ - INFO - Processing PDF file
2025-07-07 19:38:50,462 - __main__ - INFO - Extracted text length: 1670, Number of images: 4
2025-07-07 19:38:50,462 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:38:50,501 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:38:50,502 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:38:50,503 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:38:50,503 - __main__ - INFO - Processing PDF file
2025-07-07 19:38:50,547 - __main__ - INFO - Extracted text length: 1670, Number of images: 4
2025-07-07 19:38:50,548 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:39:00,712 - asyncio - ERROR - Exception in callback _ProactorBasePipeTransport._call_connection_lost()
handle: <Handle _ProactorBasePipeTransport._call_connection_lost()>
Traceback (most recent call last):
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\asyncio\events.py", line 89, in _run
    self._context.run(self._callback, *self._args)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\asyncio\proactor_events.py", line 165, in _call_connection_lost
    self._sock.shutdown(socket.SHUT_RDWR)
    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host
2025-07-07 19:39:32,595 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:39:32,596 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:39:32,596 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:39:32,597 - __main__ - INFO - Processing DOCX file
2025-07-07 19:39:32,644 - __main__ - INFO - Extracted text length: 1674, Number of images: 4
2025-07-07 19:39:32,644 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:42:19,631 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:45:19,487 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:45:25,438 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:45:25,439 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:45:25,439 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:45:25,440 - __main__ - INFO - Processing DOCX file
2025-07-07 19:45:25,459 - __main__ - INFO - Extracted text length: 1674, Number of images: 4
2025-07-07 19:45:25,460 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:45:36,477 - asyncio - ERROR - Exception in callback _ProactorBasePipeTransport._call_connection_lost()
handle: <Handle _ProactorBasePipeTransport._call_connection_lost()>
Traceback (most recent call last):
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\asyncio\events.py", line 89, in _run
    self._context.run(self._callback, *self._args)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\asyncio\proactor_events.py", line 165, in _call_connection_lost
    self._sock.shutdown(socket.SHUT_RDWR)
    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host
2025-07-07 19:48:37,239 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 19:48:48,643 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 19:48:48,644 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 19:48:48,645 - __main__ - INFO - File size: 285804 bytes
2025-07-07 19:48:48,645 - __main__ - INFO - Processing DOCX file
2025-07-07 19:48:48,698 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 19:48:48,699 - __main__ - INFO - Document processing completed successfully
2025-07-07 19:49:38,418 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 19:49:38,418 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 19:49:38,419 - __main__ - INFO - File size: 338945 bytes
2025-07-07 19:49:38,419 - __main__ - INFO - Processing PDF file
2025-07-07 19:49:38,479 - __main__ - INFO - Extracted text length: 1670, Number of images: 4
2025-07-07 19:49:38,480 - __main__ - INFO - Document processing completed successfully
2025-07-07 20:04:24,936 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 20:04:30,218 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 20:04:30,219 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 20:04:30,219 - __main__ - INFO - File size: 285804 bytes
2025-07-07 20:04:30,220 - __main__ - INFO - Processing DOCX file
2025-07-07 20:04:30,232 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 20:04:30,233 - __main__ - INFO - Document processing completed successfully
2025-07-07 22:23:25,419 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 22:23:42,416 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 22:23:42,417 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 22:23:42,418 - __main__ - INFO - File size: 338945 bytes
2025-07-07 22:23:42,418 - __main__ - INFO - Processing PDF file
2025-07-07 22:23:42,599 - __main__ - INFO - Extracted text length: 1670, Number of images: 4
2025-07-07 22:23:42,600 - __main__ - INFO - Document processing completed successfully
2025-07-07 22:27:59,887 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 22:28:08,803 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 22:28:08,804 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 22:28:08,805 - __main__ - INFO - File size: 285804 bytes
2025-07-07 22:28:08,805 - __main__ - INFO - Processing DOCX file
2025-07-07 22:28:08,903 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 22:28:08,904 - __main__ - INFO - Document processing completed successfully
2025-07-07 22:38:21,535 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 22:38:31,881 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 22:38:31,882 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 22:38:31,882 - __main__ - INFO - File size: 338945 bytes
2025-07-07 22:38:31,883 - __main__ - INFO - Processing PDF file
2025-07-07 22:38:31,944 - __main__ - INFO - Extracted text length: 1670, Number of images: 4
2025-07-07 22:38:31,945 - __main__ - INFO - Document processing completed successfully
2025-07-07 22:38:53,663 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 22:38:53,663 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 22:38:53,664 - __main__ - INFO - File size: 285804 bytes
2025-07-07 22:38:53,664 - __main__ - INFO - Processing DOCX file
2025-07-07 22:38:53,708 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 22:38:53,709 - __main__ - INFO - Document processing completed successfully
2025-07-07 22:41:51,189 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 22:41:51,191 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 22:41:51,192 - __main__ - INFO - File size: 338945 bytes
2025-07-07 22:41:51,194 - __main__ - INFO - Processing PDF file
2025-07-07 22:41:51,266 - __main__ - INFO - Extracted text length: 1670, Number of images: 4
2025-07-07 22:41:51,267 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:05:53,931 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 23:06:02,360 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:06:02,362 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:06:02,362 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:06:02,363 - __main__ - INFO - Processing DOCX file
2025-07-07 23:06:02,414 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:06:04,811 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:06:04,823 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:06:04,888 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:06:04,889 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:06:04,889 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:06:04,890 - __main__ - INFO - Processing DOCX file
2025-07-07 23:06:04,931 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:06:06,642 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:06:06,645 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:08:52,923 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:08:52,923 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:08:52,923 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:08:52,924 - __main__ - INFO - Processing PDF file
2025-07-07 23:08:52,974 - __main__ - INFO - Extracted text length: 1416, Number of images: 2
2025-07-07 23:08:54,727 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:08:54,730 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:08:54,758 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:08:54,759 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:08:54,759 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:08:54,760 - __main__ - INFO - Processing PDF file
2025-07-07 23:08:54,796 - __main__ - INFO - Extracted text length: 1416, Number of images: 2
2025-07-07 23:08:56,331 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:08:56,366 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:12:30,544 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 23:12:46,803 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:12:46,804 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:12:46,805 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:12:46,805 - __main__ - INFO - Processing PDF file
2025-07-07 23:12:46,871 - __main__ - INFO - Extracted text length: 1438, Number of images: 4
2025-07-07 23:12:49,189 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:12:49,192 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:12:49,231 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:12:49,232 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:12:49,232 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:12:49,232 - __main__ - INFO - Processing PDF file
2025-07-07 23:12:49,282 - __main__ - INFO - Extracted text length: 1438, Number of images: 4
2025-07-07 23:12:51,235 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:12:51,238 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:16:03,602 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 23:16:16,292 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:16:16,293 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:16:16,293 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:16:16,294 - __main__ - INFO - Processing PDF file
2025-07-07 23:16:16,362 - __main__ - ERROR - Error during document processing: bad image name
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 374, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 252, in extract_text_and_images_from_pdf
    bbox = page.get_image_bbox(xref)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymupdf\__init__.py", line 9403, in get_image_bbox
    raise ValueError('bad image name')
ValueError: bad image name

2025-07-07 23:17:12,882 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 23:17:22,726 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:17:22,727 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:17:22,727 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:17:22,728 - __main__ - INFO - Processing PDF file
2025-07-07 23:17:22,780 - __main__ - ERROR - Error during document processing: bad image name
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 374, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 252, in extract_text_and_images_from_pdf
    bbox = page.get_image_bbox(xref)
  File "C:\Users\sharv\AppData\Local\Programs\Python\Python313\Lib\site-packages\pymupdf\__init__.py", line 9403, in get_image_bbox
    raise ValueError('bad image name')
ValueError: bad image name

2025-07-07 23:20:45,505 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 23:20:57,421 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:20:57,422 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:20:57,423 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:20:57,424 - __main__ - INFO - Processing PDF file
2025-07-07 23:20:57,485 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:21:01,070 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:21:01,083 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:21:01,138 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:21:01,139 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:21:01,140 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:21:01,141 - __main__ - INFO - Processing PDF file
2025-07-07 23:21:01,186 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:21:06,025 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:21:06,131 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:22:40,135 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:22:40,135 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:22:40,136 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:22:40,136 - __main__ - INFO - Processing DOCX file
2025-07-07 23:22:40,188 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:22:45,013 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:22:45,036 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:22:45,071 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:22:45,072 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:22:45,072 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:22:45,073 - __main__ - INFO - Processing DOCX file
2025-07-07 23:22:45,112 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:22:47,395 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:22:47,406 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:48:24,051 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-07 23:48:47,930 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:48:47,931 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:48:47,931 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:48:47,932 - __main__ - INFO - Processing PDF file
2025-07-07 23:48:48,008 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:48:50,304 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:48:50,306 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:48:50,335 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:48:50,337 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:48:50,338 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:48:50,338 - __main__ - INFO - Processing PDF file
2025-07-07 23:48:50,390 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:48:52,431 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:48:52,434 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:49:09,280 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:49:09,281 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:49:09,281 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:49:09,282 - __main__ - INFO - Processing DOCX file
2025-07-07 23:49:09,332 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:49:11,221 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:49:11,223 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:49:11,259 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:49:11,259 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:49:11,260 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:49:11,260 - __main__ - INFO - Processing DOCX file
2025-07-07 23:49:11,308 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:49:13,188 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:49:13,190 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:49:56,946 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:49:56,946 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:49:56,947 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:49:56,947 - __main__ - INFO - Processing PDF file
2025-07-07 23:49:56,993 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:49:58,775 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:49:58,777 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:49:58,828 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:49:58,830 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:49:58,831 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:49:58,831 - __main__ - INFO - Processing PDF file
2025-07-07 23:49:58,871 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:50:00,631 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:50:00,634 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:56:20,190 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:56:20,191 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:56:20,191 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:56:20,192 - __main__ - INFO - Processing PDF file
2025-07-07 23:56:20,233 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:56:22,043 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:56:22,045 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:56:22,067 - __main__ - INFO - Received file: Business Case.pdf
2025-07-07 23:56:22,067 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-07 23:56:22,068 - __main__ - INFO - File size: 338945 bytes
2025-07-07 23:56:22,068 - __main__ - INFO - Processing PDF file
2025-07-07 23:56:22,104 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-07 23:56:22,880 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-07 23:56:22,881 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.378645 seconds
2025-07-07 23:56:24,613 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:56:24,617 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:56:52,305 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:56:52,305 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:56:52,306 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:56:52,306 - __main__ - INFO - Processing DOCX file
2025-07-07 23:56:52,320 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:56:53,760 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:56:53,762 - __main__ - INFO - Document processing completed successfully
2025-07-07 23:56:53,782 - __main__ - INFO - Received file: Business Case.docx
2025-07-07 23:56:53,783 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-07 23:56:53,783 - __main__ - INFO - File size: 285804 bytes
2025-07-07 23:56:53,783 - __main__ - INFO - Processing DOCX file
2025-07-07 23:56:53,799 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-07 23:56:55,302 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-07 23:56:55,305 - __main__ - INFO - Document processing completed successfully
2025-07-08 00:08:23,807 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 00:08:23,808 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 00:08:23,809 - __main__ - INFO - File size: 285804 bytes
2025-07-08 00:08:23,810 - __main__ - INFO - Processing DOCX file
2025-07-08 00:08:23,857 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 00:08:25,526 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 00:08:25,528 - __main__ - INFO - Document processing completed successfully
2025-07-08 00:08:25,557 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 00:08:25,557 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 00:08:25,558 - __main__ - INFO - File size: 285804 bytes
2025-07-08 00:08:25,558 - __main__ - INFO - Processing DOCX file
2025-07-08 00:08:25,590 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 00:08:27,253 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 00:08:27,256 - __main__ - INFO - Document processing completed successfully
2025-07-08 10:50:24,479 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 10:52:02,132 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 10:52:02,133 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 10:52:02,134 - __main__ - INFO - File size: 285804 bytes
2025-07-08 10:52:02,134 - __main__ - INFO - Processing DOCX file
2025-07-08 10:52:02,204 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 10:52:04,415 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 10:52:04,424 - __main__ - INFO - Document processing completed successfully
2025-07-08 10:52:04,475 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 10:52:04,475 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 10:52:04,476 - __main__ - INFO - File size: 285804 bytes
2025-07-08 10:52:04,477 - __main__ - INFO - Processing DOCX file
2025-07-08 10:52:04,508 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 10:52:06,330 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK" 
2025-07-08 10:52:06,333 - __main__ - INFO - Document processing completed successfully
2025-07-08 11:01:30,390 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 11:01:30,391 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 11:01:30,391 - __main__ - INFO - File size: 285804 bytes
2025-07-08 11:01:30,392 - __main__ - INFO - Processing DOCX file
2025-07-08 11:01:30,443 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 11:01:32,190 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 11:01:32,192 - __main__ - INFO - Document processing completed successfully
2025-07-08 11:01:32,222 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 11:01:32,223 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 11:01:32,224 - __main__ - INFO - File size: 285804 bytes
2025-07-08 11:01:32,226 - __main__ - INFO - Processing DOCX file
2025-07-08 11:01:32,275 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 11:01:34,239 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 11:01:34,241 - __main__ - INFO - Document processing completed successfully
2025-07-08 11:02:43,010 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 11:02:43,010 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 11:02:43,010 - __main__ - INFO - File size: 338945 bytes
2025-07-08 11:02:43,011 - __main__ - INFO - Processing PDF file
2025-07-08 11:02:43,155 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 11:02:45,357 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 11:02:45,412 - __main__ - INFO - Document processing completed successfully
2025-07-08 11:02:45,433 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 11:02:45,434 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 11:02:45,434 - __main__ - INFO - File size: 338945 bytes
2025-07-08 11:02:45,435 - __main__ - INFO - Processing PDF file
2025-07-08 11:02:45,476 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 11:02:47,552 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 11:02:47,554 - __main__ - INFO - Document processing completed successfully
2025-07-08 12:01:45,752 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 12:06:43,917 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 12:14:40,758 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 12:14:48,527 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 12:14:48,527 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 12:14:48,528 - __main__ - INFO - File size: 285804 bytes
2025-07-08 12:14:48,528 - __main__ - INFO - Processing DOCX file
2025-07-08 12:14:48,541 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 12:14:50,165 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 12:14:50,167 - __main__ - INFO - Document processing completed successfully
2025-07-08 12:14:50,194 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 12:14:50,195 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 12:14:50,195 - __main__ - INFO - File size: 285804 bytes
2025-07-08 12:14:50,196 - __main__ - INFO - Processing DOCX file
2025-07-08 12:14:50,210 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 12:14:51,795 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 12:14:51,797 - __main__ - INFO - Document processing completed successfully
2025-07-08 13:54:25,354 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 14:18:35,538 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 14:18:38,874 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 14:18:38,875 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 14:18:38,876 - __main__ - INFO - File size: 285804 bytes
2025-07-08 14:18:38,876 - __main__ - INFO - Processing DOCX file
2025-07-08 14:18:38,891 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 14:18:40,573 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:18:40,576 - __main__ - INFO - Document processing completed successfully
2025-07-08 14:18:40,598 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 14:18:40,599 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 14:18:40,599 - __main__ - INFO - File size: 285804 bytes
2025-07-08 14:18:40,600 - __main__ - INFO - Processing DOCX file
2025-07-08 14:18:40,620 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 14:18:42,220 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:18:42,223 - __main__ - INFO - Document processing completed successfully
2025-07-08 14:19:45,340 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 14:19:45,341 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 14:19:45,341 - __main__ - INFO - File size: 285804 bytes
2025-07-08 14:19:45,342 - __main__ - INFO - Processing DOCX file
2025-07-08 14:19:45,381 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 14:19:47,118 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:19:47,120 - __main__ - INFO - Document processing completed successfully
2025-07-08 14:19:47,155 - __main__ - INFO - Received file: Business Case.docx
2025-07-08 14:19:47,156 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-08 14:19:47,156 - __main__ - INFO - File size: 285804 bytes
2025-07-08 14:19:47,157 - __main__ - INFO - Processing DOCX file
2025-07-08 14:19:47,188 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-08 14:19:48,970 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:19:48,972 - __main__ - INFO - Document processing completed successfully
2025-07-08 14:21:01,328 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 14:21:01,328 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 14:21:01,328 - __main__ - INFO - File size: 338945 bytes
2025-07-08 14:21:01,329 - __main__ - INFO - Processing PDF file
2025-07-08 14:21:01,387 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 14:21:03,210 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:21:03,213 - __main__ - INFO - Document processing completed successfully
2025-07-08 14:21:03,239 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 14:21:03,240 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 14:21:03,240 - __main__ - INFO - File size: 338945 bytes
2025-07-08 14:21:03,240 - __main__ - INFO - Processing PDF file
2025-07-08 14:21:03,273 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 14:21:05,226 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:21:05,237 - __main__ - INFO - Document processing completed successfully
2025-07-08 14:27:15,529 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 14:27:15,529 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 14:27:15,530 - __main__ - INFO - File size: 338945 bytes
2025-07-08 14:27:15,530 - __main__ - INFO - Processing PDF file
2025-07-08 14:27:15,572 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 14:27:17,681 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:27:17,683 - __main__ - INFO - Document processing completed successfully
2025-07-08 14:27:17,710 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 14:27:17,711 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 14:27:17,712 - __main__ - INFO - File size: 338945 bytes
2025-07-08 14:27:17,712 - __main__ - INFO - Processing PDF file
2025-07-08 14:27:17,756 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 14:27:19,783 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 14:27:19,784 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:06:14,287 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 15:06:24,172 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:06:24,173 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:06:24,174 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:06:24,174 - __main__ - INFO - Processing PDF file
2025-07-08 15:06:24,265 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:06:26,362 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:06:26,365 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:06:26,414 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:06:26,415 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:06:26,416 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:06:26,416 - __main__ - INFO - Processing PDF file
2025-07-08 15:06:26,465 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:06:28,231 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:06:28,234 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:28:55,418 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 15:29:11,177 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:29:11,178 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:29:11,178 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:29:11,179 - __main__ - INFO - Processing PDF file
2025-07-08 15:29:11,241 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:29:13,204 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:29:13,209 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:29:13,277 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:29:13,278 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:29:13,279 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:29:13,279 - __main__ - INFO - Processing PDF file
2025-07-08 15:29:13,318 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:29:15,024 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:29:15,027 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:31:35,281 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 15:31:45,690 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:31:45,691 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:31:45,691 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:31:45,692 - __main__ - INFO - Processing PDF file
2025-07-08 15:31:45,774 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:31:47,676 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:31:47,678 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:31:47,716 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:31:47,717 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:31:47,717 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:31:47,718 - __main__ - INFO - Processing PDF file
2025-07-08 15:31:47,761 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:31:49,471 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:31:49,474 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:35:21,504 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 15:35:32,902 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:35:32,903 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:35:32,903 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:35:32,904 - __main__ - INFO - Processing PDF file
2025-07-08 15:35:32,983 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:35:34,892 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:35:34,897 - __main__ - INFO - Document processing completed successfully
2025-07-08 15:35:34,954 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 15:35:34,955 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 15:35:34,956 - __main__ - INFO - File size: 338945 bytes
2025-07-08 15:35:34,956 - __main__ - INFO - Processing PDF file
2025-07-08 15:35:35,002 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 15:35:36,695 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 15:35:36,697 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:02:26,589 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 16:04:04,941 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:04:04,942 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:04:04,943 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:04:04,944 - __main__ - INFO - Processing PDF file
2025-07-08 16:04:05,035 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:04:06,956 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:04:06,960 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:04:07,012 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:04:07,013 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:04:07,013 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:04:07,014 - __main__ - INFO - Processing PDF file
2025-07-08 16:04:07,061 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:04:08,776 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:04:08,779 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:15:05,219 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 16:15:24,523 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:15:24,525 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:15:24,525 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:15:24,526 - __main__ - INFO - Processing PDF file
2025-07-08 16:15:24,625 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:15:26,694 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:15:26,699 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:15:26,726 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:15:26,727 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:15:26,728 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:15:26,728 - __main__ - INFO - Processing PDF file
2025-07-08 16:15:26,777 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:15:28,524 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:15:28,527 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:19:57,921 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 16:20:07,561 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:20:07,563 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:20:07,563 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:20:07,563 - __main__ - INFO - Processing PDF file
2025-07-08 16:20:07,643 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:20:09,749 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:20:09,753 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:20:09,791 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:20:09,792 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:20:09,793 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:20:09,794 - __main__ - INFO - Processing PDF file
2025-07-08 16:20:09,841 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:20:11,647 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:20:11,650 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:29:09,185 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 16:29:19,916 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:29:19,917 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:29:19,918 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:29:19,918 - __main__ - INFO - Processing PDF file
2025-07-08 16:29:19,968 - __main__ - ERROR - Error during document processing: 'y0'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 418, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 302, in extract_text_and_images_from_pdf
    if tb['y0'] < img['y1']:
       ~~^^^^^^
KeyError: 'y0'

2025-07-08 16:37:45,490 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 16:37:47,653 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:37:47,654 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:37:47,654 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:37:47,654 - __main__ - INFO - Processing PDF file
2025-07-08 16:37:47,665 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 16:37:47,669 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 16:37:47,670 - __main__ - ERROR - Error during document processing: 'y0'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 424, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 304, in extract_text_and_images_from_pdf
    if tb['y0'] < img['y1']:
       ~~^^^^^^
KeyError: 'y0'

2025-07-08 16:41:44,787 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:41:44,788 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:41:44,788 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:41:44,789 - __main__ - INFO - Processing PDF file
2025-07-08 16:41:44,804 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 16:41:44,814 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 16:41:44,819 - __main__ - ERROR - Error during document processing: 'y0'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 424, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 304, in extract_text_and_images_from_pdf
    if tb.get('type') == 'text' and tb['y0'] < img['y1']:
       ^^^^^^^^
KeyError: 'y0'

2025-07-08 16:41:50,493 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:41:50,493 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:41:50,494 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:41:50,494 - __main__ - INFO - Processing PDF file
2025-07-08 16:41:50,509 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 16:41:50,517 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 16:41:50,520 - __main__ - ERROR - Error during document processing: 'y0'
Traceback (most recent call last):
  File "C:\Users\sharv\Intern_project\backend\app.py", line 424, in convert_file
    text, images, placeholder_map = await extract_text_and_images_from_pdf(file_content, doc_name=doc_name)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sharv\Intern_project\backend\app.py", line 304, in extract_text_and_images_from_pdf
    if tb.get('type') == 'text' and tb['y0'] < img['y1']:
       ^^^^^^^^
KeyError: 'y0'

2025-07-08 16:58:38,297 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 16:58:46,954 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:58:46,955 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:58:46,957 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:58:46,957 - __main__ - INFO - Processing PDF file
2025-07-08 16:58:46,974 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 16:58:46,981 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 16:58:46,997 - __main__ - INFO - Processing page 3: 6 text blocks, 1 image blocks
2025-07-08 16:58:47,005 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:58:48,715 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:58:48,719 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:58:48,748 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 16:58:48,749 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 16:58:48,750 - __main__ - INFO - File size: 338945 bytes
2025-07-08 16:58:48,750 - __main__ - INFO - Processing PDF file
2025-07-08 16:58:48,764 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 16:58:48,772 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 16:58:48,786 - __main__ - INFO - Processing page 3: 6 text blocks, 1 image blocks
2025-07-08 16:58:48,792 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 16:58:50,294 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:58:50,296 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:59:06,397 - __main__ - INFO - Received file: Tenable Nessus documentation 3.docx
2025-07-08 16:59:06,397 - __main__ - INFO - Starting conversion for file: Tenable Nessus documentation 3.docx
2025-07-08 16:59:06,397 - __main__ - INFO - File size: 143133 bytes
2025-07-08 16:59:06,398 - __main__ - INFO - Processing DOCX file
2025-07-08 16:59:06,417 - __main__ - INFO - Extracted text length: 1459, Number of images: 1
2025-07-08 16:59:07,911 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:59:07,913 - __main__ - INFO - Document processing completed successfully
2025-07-08 16:59:07,937 - __main__ - INFO - Received file: Tenable Nessus documentation 3.docx
2025-07-08 16:59:07,938 - __main__ - INFO - Starting conversion for file: Tenable Nessus documentation 3.docx
2025-07-08 16:59:07,939 - __main__ - INFO - File size: 143133 bytes
2025-07-08 16:59:07,939 - __main__ - INFO - Processing DOCX file
2025-07-08 16:59:07,969 - __main__ - INFO - Extracted text length: 1459, Number of images: 1
2025-07-08 16:59:09,471 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 16:59:09,473 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:27:36,199 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 23:29:16,322 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:29:16,323 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:29:16,324 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:29:16,324 - __main__ - INFO - Processing PDF file
2025-07-08 23:29:16,456 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 23:29:16,475 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 23:29:16,496 - __main__ - INFO - Processing page 3: 6 text blocks, 1 image blocks
2025-07-08 23:29:16,502 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 23:29:19,485 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:29:19,496 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:29:19,531 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:29:19,532 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:29:19,533 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:29:19,534 - __main__ - INFO - Processing PDF file
2025-07-08 23:29:19,556 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 23:29:19,571 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 23:29:19,603 - __main__ - INFO - Processing page 3: 6 text blocks, 1 image blocks
2025-07-08 23:29:19,610 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 23:29:22,078 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:29:22,083 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:29:22,130 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:29:22,131 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:29:22,132 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:29:22,133 - __main__ - INFO - Processing PDF file
2025-07-08 23:29:22,151 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 23:29:22,159 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 23:29:22,178 - __main__ - INFO - Processing page 3: 6 text blocks, 1 image blocks
2025-07-08 23:29:22,182 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 23:29:24,830 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:29:24,833 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:44:20,857 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 23:44:28,002 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:44:28,002 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:44:28,003 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:44:28,003 - __main__ - INFO - Processing PDF file
2025-07-08 23:44:28,016 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 23:44:28,021 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 23:44:28,031 - __main__ - INFO - Processing page 3: 6 text blocks, 1 image blocks
2025-07-08 23:44:28,035 - __main__ - INFO - Extracted text length: 1385, Number of images: 4
2025-07-08 23:44:30,061 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:44:30,064 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:44:30,099 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:44:30,099 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:44:30,100 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:44:30,100 - __main__ - INFO - Processing PDF file
2025-07-08 23:44:30,114 - __main__ - INFO - Processing page 1: 7 text blocks, 1 image blocks
2025-07-08 23:44:30,121 - __main__ - INFO - Processing page 2: 6 text blocks, 2 image blocks
2025-07-08 23:44:30,138 - __main__ - INFO - Processing page 3: 6 text blocks, 1 image blocks
2025-07-08 23:44:30,142 - __main__ - INFO - Extracted text length: 1385, Number of images: 4
2025-07-08 23:44:32,130 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:44:32,132 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:46:42,801 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 23:46:49,995 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:46:49,996 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:46:49,997 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:46:49,997 - __main__ - INFO - Processing PDF file
2025-07-08 23:46:50,056 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 23:46:52,143 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:46:52,146 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:46:52,184 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:46:52,185 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:46:52,186 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:46:52,186 - __main__ - INFO - Processing PDF file
2025-07-08 23:46:52,238 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 23:46:54,055 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:46:54,056 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:59:18,881 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-08 23:59:28,377 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:59:28,378 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:59:28,379 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:59:28,379 - __main__ - INFO - Processing PDF file
2025-07-08 23:59:28,450 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 23:59:30,508 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:59:30,512 - __main__ - INFO - Document processing completed successfully
2025-07-08 23:59:30,558 - __main__ - INFO - Received file: Business Case.pdf
2025-07-08 23:59:30,559 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-08 23:59:30,559 - __main__ - INFO - File size: 338945 bytes
2025-07-08 23:59:30,560 - __main__ - INFO - Processing PDF file
2025-07-08 23:59:30,602 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-08 23:59:32,382 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-08 23:59:32,384 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:01:05,383 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:01:26,749 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:01:26,750 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:01:26,751 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:01:26,751 - __main__ - INFO - Processing PDF file
2025-07-09 00:01:26,801 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-09 00:01:28,879 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 00:01:28,882 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:01:28,924 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:01:28,924 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:01:28,925 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:01:28,925 - __main__ - INFO - Processing PDF file
2025-07-09 00:01:28,961 - __main__ - INFO - Extracted text length: 1379, Number of images: 4
2025-07-09 00:01:30,726 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 00:01:30,728 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:09:23,794 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:09:44,351 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:09:44,352 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:09:44,352 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:09:44,353 - __main__ - INFO - Processing PDF file
2025-07-09 00:09:44,459 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:09:44,961 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:09:44,963 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:09:44,963 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:09:45,056 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:09:45,057 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:09:45,057 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:09:45,057 - __main__ - INFO - Processing PDF file
2025-07-09 00:09:45,144 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:09:45,488 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:09:45,489 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:09:45,489 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:13:09,531 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:13:09,532 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:13:09,533 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:13:09,533 - __main__ - INFO - Processing DOCX file
2025-07-09 00:13:09,578 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:13:10,261 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-09 00:13:10,262 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.439959 seconds
2025-07-09 00:13:10,996 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-07-09 00:13:10,999 - groq._base_client - INFO - Retrying request to /openai/v1/chat/completions in 0.883143 seconds
2025-07-09 00:13:11,929 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:13:11,930 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:13:11,930 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:13:11,961 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:13:11,961 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:13:11,962 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:13:11,962 - __main__ - INFO - Processing DOCX file
2025-07-09 00:13:11,981 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:13:12,310 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:13:12,310 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:13:12,311 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:13:43,575 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:13:43,575 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:13:43,575 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:13:43,576 - __main__ - INFO - Processing DOCX file
2025-07-09 00:13:43,595 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:13:43,938 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:13:43,938 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:13:43,939 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:17:03,321 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:17:11,335 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:17:11,336 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:17:11,337 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:17:11,338 - __main__ - INFO - Processing PDF file
2025-07-09 00:17:11,483 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:17:12,384 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:17:12,385 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:17:12,386 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:17:12,434 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:17:12,435 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:17:12,435 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:17:12,435 - __main__ - INFO - Processing PDF file
2025-07-09 00:17:12,562 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:17:13,372 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:17:13,374 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:17:13,374 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:19:10,872 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:19:10,873 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:19:10,873 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:19:10,873 - __main__ - INFO - Processing DOCX file
2025-07-09 00:19:10,903 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:19:11,547 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:19:11,548 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:19:11,549 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:23:16,618 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:23:27,062 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:23:27,064 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:23:27,064 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:23:27,064 - __main__ - INFO - Processing DOCX file
2025-07-09 00:23:27,109 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:23:27,957 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:23:27,959 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:23:27,960 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:23:27,999 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:23:28,006 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:23:28,020 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:23:28,026 - __main__ - INFO - Processing DOCX file
2025-07-09 00:23:28,095 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:23:28,756 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:23:28,758 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:23:28,759 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:23:45,009 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:23:45,010 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:23:45,010 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:23:45,010 - __main__ - INFO - Processing PDF file
2025-07-09 00:23:45,184 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:23:45,750 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:23:45,752 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:23:45,753 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:23:45,792 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:23:45,793 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:23:45,794 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:23:45,794 - __main__ - INFO - Processing PDF file
2025-07-09 00:23:45,966 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:23:46,515 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:23:46,517 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:23:46,518 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:24:48,080 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:28:24,903 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:28:37,168 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:28:37,170 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:28:37,171 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:28:37,171 - __main__ - INFO - Processing DOCX file
2025-07-09 00:28:37,229 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:28:37,979 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:28:37,980 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:28:37,981 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:28:38,022 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:28:38,023 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:28:38,024 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:28:38,024 - __main__ - INFO - Processing DOCX file
2025-07-09 00:28:38,063 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:28:38,676 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:28:38,677 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:28:38,678 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:28:53,377 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:28:53,378 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:28:53,379 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:28:53,379 - __main__ - INFO - Processing PDF file
2025-07-09 00:28:53,568 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:28:54,066 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:28:54,067 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:28:54,068 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:32:21,924 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:32:34,548 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:32:34,549 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:32:34,549 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:32:34,550 - __main__ - INFO - Processing PDF file
2025-07-09 00:32:34,746 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:32:35,479 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:32:35,480 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:32:35,482 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:32:35,548 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 00:32:35,549 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 00:32:35,549 - __main__ - INFO - File size: 338945 bytes
2025-07-09 00:32:35,550 - __main__ - INFO - Processing PDF file
2025-07-09 00:32:35,688 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 00:32:36,220 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:32:36,221 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:32:36,222 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:36:13,659 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 00:36:22,889 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:36:22,890 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:36:22,891 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:36:22,892 - __main__ - INFO - Processing DOCX file
2025-07-09 00:36:22,962 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:36:23,772 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:36:23,774 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:36:23,782 - __main__ - INFO - Document processing completed successfully
2025-07-09 00:36:23,826 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 00:36:23,827 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 00:36:23,827 - __main__ - INFO - File size: 285804 bytes
2025-07-09 00:36:23,828 - __main__ - INFO - Processing DOCX file
2025-07-09 00:36:23,867 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 00:36:24,395 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 00:36:24,397 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 00:36:24,398 - __main__ - INFO - Document processing completed successfully
2025-07-09 10:46:59,881 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 10:47:33,892 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 10:47:33,894 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 10:47:33,895 - __main__ - INFO - File size: 338945 bytes
2025-07-09 10:47:33,895 - __main__ - INFO - Processing PDF file
2025-07-09 10:47:34,356 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 10:47:36,545 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 10:47:36,549 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 10:47:36,555 - __main__ - INFO - Document processing completed successfully
2025-07-09 10:47:36,606 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 10:47:36,607 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 10:47:36,609 - __main__ - INFO - File size: 338945 bytes
2025-07-09 10:47:36,610 - __main__ - INFO - Processing PDF file
2025-07-09 10:47:36,866 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 10:47:38,225 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 10:47:38,229 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 10:47:38,233 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:02:36,825 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 11:02:48,359 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:02:48,361 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:02:48,362 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:02:48,365 - __main__ - INFO - Processing DOCX file
2025-07-09 11:02:48,455 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:02:50,530 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 11:02:50,533 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 11:02:50,537 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:02:50,618 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:02:50,619 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:02:50,622 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:02:50,623 - __main__ - INFO - Processing DOCX file
2025-07-09 11:02:50,687 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:02:52,224 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 11:02:52,226 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 11:02:52,228 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:10:43,980 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 11:10:49,053 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:10:49,054 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:10:49,054 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:10:49,055 - __main__ - INFO - Processing DOCX file
2025-07-09 11:10:49,080 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:10:50,764 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 11:10:50,765 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 11:10:50,767 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:10:50,792 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:10:50,792 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:10:50,793 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:10:50,793 - __main__ - INFO - Processing DOCX file
2025-07-09 11:10:50,826 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:10:51,263 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 11:10:51,265 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 11:10:51,266 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:11:12,580 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:11:12,583 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:11:12,584 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:11:12,585 - __main__ - INFO - Processing PDF file
2025-07-09 11:11:12,899 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 11:11:14,261 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 11:11:14,263 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 11:11:14,264 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:11:14,294 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:11:14,295 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:11:14,295 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:11:14,295 - __main__ - INFO - Processing PDF file
2025-07-09 11:11:14,578 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 11:11:15,959 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-07-09 11:11:15,961 - __main__ - ERROR - Error processing document with Groq: Error code: 400 - {'error': {'message': '`max_tokens` must be less than or equal to `8192`, the maximum value for `max_tokens` is less than the `context_window` for this model', 'type': 'invalid_request_error'}}
2025-07-09 11:11:15,963 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:18:16,723 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 11:18:27,687 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:18:27,690 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:18:27,691 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:18:27,692 - __main__ - INFO - Processing DOCX file
2025-07-09 11:18:27,775 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:18:30,577 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:18:30,605 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:18:30,635 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:18:30,636 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:18:30,637 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:18:30,639 - __main__ - INFO - Processing DOCX file
2025-07-09 11:18:30,701 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:18:33,130 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:18:33,134 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:18:49,233 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:18:49,233 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:18:49,234 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:18:49,235 - __main__ - INFO - Processing PDF file
2025-07-09 11:18:49,519 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 11:18:52,185 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:18:52,189 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:18:52,232 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:18:52,232 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:18:52,233 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:18:52,234 - __main__ - INFO - Processing PDF file
2025-07-09 11:18:52,503 - __main__ - INFO - Extracted text length: 1389, Number of images: 4
2025-07-09 11:18:55,119 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:18:55,123 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:21:18,206 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 11:21:29,517 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:21:29,518 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:21:29,519 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:21:29,520 - __main__ - INFO - Processing PDF file
2025-07-09 11:21:29,799 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-09 11:21:32,856 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:21:32,866 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:21:32,931 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:21:32,931 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:21:32,932 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:21:32,933 - __main__ - INFO - Processing PDF file
2025-07-09 11:21:33,214 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-09 11:21:35,864 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:21:35,867 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:31:42,909 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 11:35:04,304 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:35:04,306 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:35:04,307 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:35:04,307 - __main__ - INFO - Processing PDF file
2025-07-09 11:35:04,474 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-09 11:35:06,524 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:35:06,528 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:35:06,562 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:35:06,563 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:35:06,564 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:35:06,565 - __main__ - INFO - Processing PDF file
2025-07-09 11:35:06,758 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-09 11:35:08,898 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:35:08,900 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:35:37,018 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:35:37,019 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:35:37,022 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:35:37,024 - __main__ - INFO - Processing DOCX file
2025-07-09 11:35:37,096 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:35:38,912 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:35:38,915 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:35:38,946 - __main__ - INFO - Received file: Business Case.docx
2025-07-09 11:35:38,947 - __main__ - INFO - Starting conversion for file: Business Case.docx
2025-07-09 11:35:38,947 - __main__ - INFO - File size: 285804 bytes
2025-07-09 11:35:38,948 - __main__ - INFO - Processing DOCX file
2025-07-09 11:35:38,996 - __main__ - INFO - Extracted text length: 1673, Number of images: 4
2025-07-09 11:35:40,881 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:35:40,888 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:36:32,747 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:36:32,748 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:36:32,749 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:36:32,749 - __main__ - INFO - Processing PDF file
2025-07-09 11:36:32,905 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-09 11:36:34,708 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:36:34,711 - __main__ - INFO - Document processing completed successfully
2025-07-09 11:36:34,739 - __main__ - INFO - Received file: Business Case.pdf
2025-07-09 11:36:34,739 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-09 11:36:34,740 - __main__ - INFO - File size: 338945 bytes
2025-07-09 11:36:34,741 - __main__ - INFO - Processing PDF file
2025-07-09 11:36:34,939 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-09 11:36:36,876 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-09 11:36:36,878 - __main__ - INFO - Document processing completed successfully
2025-07-09 12:33:59,793 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 15:21:52,450 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-09 22:34:33,043 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-10 10:56:22,245 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-12 10:34:39,223 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-12 16:27:34,102 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-12 17:21:31,318 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-12 17:28:47,515 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-13 10:45:15,389 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-13 11:05:16,367 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-13 11:23:24,869 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-13 11:29:08,432 - __main__ - INFO - Received file: Business Case.pdf
2025-07-13 11:29:08,433 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-13 11:29:08,434 - __main__ - INFO - File size: 338945 bytes
2025-07-13 11:29:08,434 - __main__ - INFO - Processing PDF file
2025-07-13 11:29:08,789 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-13 11:29:11,321 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-13 11:29:11,332 - __main__ - INFO - Document processing completed successfully
2025-07-13 11:29:11,362 - __main__ - INFO - Received file: Business Case.pdf
2025-07-13 11:29:11,363 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-13 11:29:11,363 - __main__ - INFO - File size: 338945 bytes
2025-07-13 11:29:11,364 - __main__ - INFO - Processing PDF file
2025-07-13 11:29:11,587 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-13 11:29:13,737 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-13 11:29:13,740 - __main__ - INFO - Document processing completed successfully
2025-07-13 20:27:27,512 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-13 22:17:58,181 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
2025-07-14 00:10:17,970 - __main__ - INFO - Received file: Business Case.pdf
2025-07-14 00:10:17,972 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-14 00:10:17,973 - __main__ - INFO - File size: 338945 bytes
2025-07-14 00:10:17,974 - __main__ - INFO - Processing PDF file
2025-07-14 00:10:18,414 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-14 00:10:21,345 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-14 00:10:21,363 - __main__ - INFO - Document processing completed successfully
2025-07-14 00:10:21,397 - __main__ - INFO - Received file: Business Case.pdf
2025-07-14 00:10:21,398 - __main__ - INFO - Starting conversion for file: Business Case.pdf
2025-07-14 00:10:21,399 - __main__ - INFO - File size: 338945 bytes
2025-07-14 00:10:21,399 - __main__ - INFO - Processing PDF file
2025-07-14 00:10:21,702 - __main__ - INFO - Extracted text length: 1572, Number of images: 4
2025-07-14 00:10:24,727 - httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-14 00:10:24,731 - __main__ - INFO - Document processing completed successfully
2025-07-14 10:40:44,181 - __main__ - INFO - Using upload directory: C:\Users\sharv\Intern_project\backend\uploads
